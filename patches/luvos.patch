From 58b8c6a51852e69acad02a834e3b0fec64f7dc04 Mon Sep 17 00:00:00 2001
From: Jeyaram <jeyarambe2018@gmail.com>
Date: Mon, 16 Apr 2018 13:26:24 +0530
Subject: [PATCH] New Patch

---
 build_luvos.sh                                     |  91 +++++++
 meta-luv/classes/luv-efi.bbclass                   | 113 ++++++++-
 meta-luv/conf/distro/luv.conf                      |   2 +-
 meta-luv/recipes-bsp/sbbr/sbbr/README.md           |   2 +
 meta-luv/recipes-bsp/sbbr/sbbr/sbbr-sct.patch      | 277 +++++++++++++++++++++
 meta-luv/recipes-bsp/sbbr/sbbr_v1.0.bb             | 101 ++++++++
 meta-luv/recipes-bsp/sbsa/files/compile.sh         |  28 +++
 meta-luv/recipes-bsp/sbsa/sbsa.bb                  | 107 ++++++++
 meta-luv/recipes-bsp/sdei/files/compile.sh         |  28 +++
 meta-luv/recipes-bsp/sdei/sdei.bb                  |  64 +++++
 meta-luv/recipes-core/efivarfs/efivarfs-test.bb    |   1 -
 meta-luv/recipes-core/fwts/fwts/sbbr-fwts.patch    |  17 ++
 meta-luv/recipes-core/fwts/fwts_git.bb             |   4 +-
 .../images/core-image-efi-initramfs.bb             |   2 +-
 meta-luv/recipes-core/images/luv-image.inc         |   3 +-
 meta-luv/recipes-core/images/luv-live-image.bb     |   9 +-
 meta-luv/recipes-core/images/luv-netboot-image.bb  |   5 +-
 .../kernel_efi_warnings/kernel-efi-warnings_0.1.bb |   2 -
 meta-luv/recipes-core/luv-test/luv-test.bb         |   8 +
 .../luv-test/luv-test/luv-collect-results          | 220 ++++++++++++++++
 .../recipes-core/luv-test/luv-test/luv-message     |   2 +-
 .../recipes-core/luv-test/luv-test/luv-sbsa-test   |  18 ++
 .../recipes-core/luv-test/luv-test/luv-sdei-test   |  20 ++
 .../luv-test/luv-test/luv-test-manager             |   5 +
 .../linux/linux-yocto-efi-test_4.14.bb             |   3 +-
 meta/conf/bitbake.conf                             |   2 +-
 sbsa_setup.sh                                      |  40 +++
 sdei_setup.sh                                      |  41 +++
 28 files changed, 1199 insertions(+), 16 deletions(-)
 create mode 100755 build_luvos.sh
 create mode 100644 meta-luv/recipes-bsp/sbbr/sbbr/README.md
 create mode 100644 meta-luv/recipes-bsp/sbbr/sbbr/sbbr-sct.patch
 create mode 100644 meta-luv/recipes-bsp/sbbr/sbbr_v1.0.bb
 create mode 100755 meta-luv/recipes-bsp/sbsa/files/compile.sh
 create mode 100644 meta-luv/recipes-bsp/sbsa/sbsa.bb
 create mode 100755 meta-luv/recipes-bsp/sdei/files/compile.sh
 create mode 100644 meta-luv/recipes-bsp/sdei/sdei.bb
 create mode 100644 meta-luv/recipes-core/fwts/fwts/sbbr-fwts.patch
 create mode 100644 meta-luv/recipes-core/luv-test/luv-test/luv-collect-results
 create mode 100644 meta-luv/recipes-core/luv-test/luv-test/luv-sbsa-test
 create mode 100644 meta-luv/recipes-core/luv-test/luv-test/luv-sdei-test
 create mode 100755 sbsa_setup.sh
 create mode 100755 sdei_setup.sh

diff --git a/build_luvos.sh b/build_luvos.sh
new file mode 100755
index 0000000000..119ea84896
--- /dev/null
+++ b/build_luvos.sh
@@ -0,0 +1,91 @@
+#!/bin/bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+TOPDIR=`pwd`
+
+METALUV="$TOPDIR/meta-luv \\\\"
+METAOE="$TOPDIR/meta-oe \\\\"
+BB_CONF="conf/bblayers.conf"
+LOCAL_CONF="conf/local.conf"
+MACHINE="\"qemuarm64\""
+LUV="\"luv\""
+NUM_THREADS="BB_NUMBER_THREADS ?= \"16\""
+OUTPUT_FILE="$PWD/build/tmp/deploy/images/qemuarm64/luv-live-image-gpt.img"
+
+echo "Building LuvOS Image with SBBR and SBSA for AARCH4 ..."
+echo "UEFI-SCT source is available only to members of UEFI Forum."
+echo "To continue without building UEFI-SCT "
+read -p "Enter [yes(default)/no]: " SCTOPTIONAL
+SCTOPTIONAL=${SCTOPTIONAL:-yes}
+export SCTOPTIONAL
+if [ "$SCTOPTIONAL" = "no" ]
+then
+	echo -n User:
+	read SCTUSERNAME
+	echo -n Password:
+	read -s SCTPASSWORD
+	export SCTUSERNAME
+	export SCTPASSWORD
+else
+	echo "Continue without building UEFI-SCT..."
+fi
+echo ""
+echo "Default kernel command line parameters: 'systemd.log_target=null plymouth.ignore-serial-consoles debug ip=dhcp log_buf_len=1M efi=debug acpi=on crashkernel=256M earlycon uefi_debug'"
+echo -n "Append parameters (press Enter for default):"
+read ACS_CMDLINE_APPEND
+export ACS_CMDLINE_APPEND
+./sbsa_setup.sh
+./sdei_setup.sh
+rm -rf build
+source oe-init-build-env
+export BB_ENV_EXTRAWHITE="BB_ENV_EXTRAWHITE SCTOPTIONAL SCTUSERNAME SCTPASSWORD ACS_CMDLINE_APPEND"
+
+# include meta-luv  for building
+line=`grep -n "meta-yocto-bsp" $BB_CONF | cut -d : -f 1`
+sed -i "$line a $(echo "  $METALUV")" $BB_CONF
+sed -i "$line a $(echo "  $METAOE")" $BB_CONF
+
+# modify local.conf to edit Machine Type, Distro and Number of Threads
+sed -i -e "s/\(MACHINE ??= \).*/\1$MACHINE/" $LOCAL_CONF
+sed -i -e "s/\(DISTRO ?= \).*/\1$LUV/" $LOCAL_CONF
+sed -i -e "\$aEXTRA_IMAGE_FEATURES += \"dev-pkgs\"" $LOCAL_CONF
+echo >> $LOCAL_CONF
+echo "$NUM_THREADS" >> $LOCAL_CONF
+
+if [ "$SCTOPTIONAL" = "no" ]
+then
+	bitbake -c cleanall sbbr
+fi
+bitbake -c cleanall sbsa
+bitbake -c cleanall sdei
+bitbake -c cleanall luv-live-image
+if [ "$SCTOPTIONAL" = "no" ]
+then
+	bitbake sbbr
+fi
+bitbake sbsa
+bitbake sdei
+bitbake luv-live-image
+unset BB_ENV_EXTRAWHITE
+unset SCTOPTIONAL
+unset SCTPASSWORD
+unset SCTUSERNAME
+unset ACS_CMDLINE_APPEND
+if [ -f $OUTPUT_FILE ]; then
+	echo "Built image can be found at $OUTPUT_FILE"
+else
+	echo "Build failed..."
+fi
+exit
diff --git a/meta-luv/classes/luv-efi.bbclass b/meta-luv/classes/luv-efi.bbclass
index 8c1b892ef9..e5d0a33769 100644
--- a/meta-luv/classes/luv-efi.bbclass
+++ b/meta-luv/classes/luv-efi.bbclass
@@ -16,6 +16,13 @@ def get_bits_depends(d):
                  return ""
 _BITSDEPENDS = "${@get_bits_depends(d)}"
 
+def get_sbbr_depends(d):
+         import re
+         deps = d.getVar('TARGET_PREFIX', True)
+         if re.search("aarch64",deps):
+                 return "sbbr:do_deploy"
+_SBBRDEPENDS = "${@get_sbbr_depends(d)}"
+
 do_bootimg[depends] += "${MLPREFIX}grub-efi:do_deploy \
                         sbsigntool-native:do_populate_sysroot"
 
@@ -55,7 +62,14 @@ efi_populate() {
     # Install grub2 in EFI directory
     if [ "${TARGET_ARCH}" = "aarch64" ]; then
 		install -m 0644 ${DEPLOY_DIR_IMAGE}/${GRUB_EFI_LOADER_IMAGE} ${DEST}${EFIDIR}/${DEST_EFI_LOADER_IMAGE}
-                echo "${DEST_EFI_LOADER_IMAGE}" > ${DEST}${EFIDIR}/startup.nsh
+            if [ "${SCTOPTIONAL}" = "no" ]; then
+                echo "Including UEFI-SCT"
+                efi_populate_sbbr ${DEST}
+            fi
+            efi_populate_startup ${DEST}
+            echo "SCTOPTIONAL=${SCTOPTIONAL}"
+            efi_populate_sbsa ${DEST}
+            efi_populate_sdei ${DEST}
 
     # TODO: need conditional signing; e.g., if (DISTRO_FEATURES contains secure_boot)
     # shim bootloader does not seem to work with i386. Thus we don't use it for 32-bit
@@ -92,6 +106,87 @@ efi_populate() {
     install -m 0644 ${LUV_CFG} ${DEST}
 }
 
+efi_populate_sbbr() {
+    DEST=$1
+    cp -r ${DEPLOY_DIR_IMAGE}/sbbr ${DEST}${EFIDIR}/sbbr
+}
+
+efi_populate_sbsa() {
+    DEST=$1
+    cp -r ${DEPLOY_DIR_IMAGE}/sbsa ${DEST}${EFIDIR}/sbsa
+    cp ${DEST}${EFIDIR}/sbsa/Shell.efi ${DEST}${EFIDIR}/Shell.efi
+    echo "echo -off
+          for %i in 0 1 2 3 4 5 6 7 8 9 A B C D E F then
+            if exist FS%i:\sbsa_results then
+              FS%i:
+              cd FS%i:\sbsa_results
+              if not exist uefi then
+                mkdir uefi
+              endif
+              cd uefi
+              for %j in 0 1 2 3 4 5 6 7 8 9 A B C D E F then
+                if exist FS%j:\EFI\BOOT\sbsa\Sbsa.efi then
+                  FS%j:\EFI\BOOT\sbsa\Sbsa.efi -f SbsaResults.log
+                  goto Done
+                endif
+              endfor
+              echo \"Sbsa.efi not found\"
+            endif
+          endfor
+          echo \"LUV-RESULTS partition not found\"
+          :Done" > ${DEST}${EFIDIR}/sbsa/sbsa.nsh
+
+}
+
+efi_populate_sdei() {
+    DEST=$1
+    cp -r ${DEPLOY_DIR_IMAGE}/sdei ${DEST}${EFIDIR}/sdei
+    cp ${DEST}${EFIDIR}/sdei/Shell.efi ${DEST}${EFIDIR}/Shell.efi
+    echo "echo -off
+          for %i in 0 1 2 3 4 5 6 7 8 9 A B C D E F then
+            if exist FS%i:\sdei_results then
+              FS%i:
+              cd FS%i:\sdei_results
+              if not exist uefi then
+                mkdir uefi
+              endif
+              cd uefi
+              for %j in 0 1 2 3 4 5 6 7 8 9 A B C D E F then
+                if exist FS%j:\EFI\BOOT\sdei\Sdei.efi then
+                  FS%j:\EFI\BOOT\sdei\Sdei.efi -f SdeiResults.log
+                  goto Done
+                endif
+              endfor
+              echo \"Sdei.efi not found\"
+            endif
+          endfor
+          echo \"LUV-RESULTS partition not found\"
+          :Done" > ${DEST}${EFIDIR}/sdei/sdei.nsh
+}
+
+efi_populate_startup() {
+    DEST=$1
+    echo "echo -off
+          for %i in 0 1 2 3 4 5 6 7 8 9 A B C D E F then
+            if exist FS%i:\EFI\BOOT\sbsa\sbsa.nsh then
+              FS%i:\EFI\BOOT\sbsa\sbsa.nsh
+              goto SbsaDone
+            endif
+          endfor
+          echo \"sbsa.nsh not found\"
+          :SbsaDone
+          for %i in 0 1 2 3 4 5 6 7 8 9 A B C D E F then
+	    if exist FS%i:\EFI\BOOT\sdei\sdei.nsh then
+              FS%i:\EFI\BOOT\sdei\sdei.nsh
+              goto SdeiDone
+            endif
+          endfor
+          echo \"sdei.nsh not found\"
+          :SdeiDone
+          FS%i:
+          vmlinuz initrd=\initrd ${CMDLINE} luv_netconsole=none luv_storage=none luv_tests=fwts" > ${DEST}${EFIDIR}/startup.nsh
+}
+
 BITS_EFI_LOADER_IMAGE = "${DEST_EFI_LOADER_IMAGE}"
 efi_populate_bits() {
     DEST=$1
@@ -126,6 +221,7 @@ efi_populate_bits() {
         install -m 0644 ${DEPLOY_DIR_IMAGE}/bits/efi/boot/${BITS_EFI_LOADER_IMAGE} \
                 ${DEST}${EFIDIR}/bits/
     fi
+
 }
 
 efi_iso_populate() {
@@ -146,10 +242,12 @@ efi_iso_populate() {
     if [ -f "$iso_dir/initrd" ] ; then
         cp $iso_dir/initrd ${EFIIMGDIR}
     fi
+
 }
 
 efi_hddimg_populate() {
     efi_populate $1
+
 }
 
 python build_efi_cfg() {
@@ -172,6 +270,11 @@ python build_efi_cfg() {
        cfgfile.write('default=bits\n')
        cfgfile.write('fallback=0\n')
 
+    if re.search("aarch64", target):
+       cfgfile.write('default=sbbr/sbsa\n')
+       cfgfile.write('timeout=10\n')
+       cfgfile.write('fallback=0\n')
+
     cfgfile.write('menuentry \'luv\' {\n')
     cfgfile.write('linux /vmlinuz ')
 
@@ -199,7 +302,13 @@ python build_efi_cfg() {
        cfgfile.write('chainloader /EFI/BOOT/bits/%s\n' % loader)
        cfgfile.write('}\n')
 
+    if re.search("aarch64", target):
+       cfgfile.write('menuentry \'sbbr/sbsa\' {\n')
+       cfgfile.write('chainloader /EFI/BOOT/Shell.efi\n')
+       cfgfile.write('}\n')
+
     cfgfile.close()
+
 }
 
 # define a function that takes name and comment as arguments
@@ -252,6 +361,7 @@ python build_luv_cfg() {
     luvcfg.write('\n## END of luv.cfg ##')
 
     luvcfg.close()
+
 }
 
 create_symlinks() {
@@ -262,4 +372,5 @@ create_symlinks() {
 
 	rm -f ${DEPLOY_DIR_IMAGE}/${IMAGE_LINK_NAME}.hddimg
 	ln -s ${IMAGE_NAME}.hddimg ${DEPLOY_DIR_IMAGE}/${IMAGE_LINK_NAME}.hddimg
+
 }
diff --git a/meta-luv/conf/distro/luv.conf b/meta-luv/conf/distro/luv.conf
index fb0a83314b..55ddcfe326 100644
--- a/meta-luv/conf/distro/luv.conf
+++ b/meta-luv/conf/distro/luv.conf
@@ -17,4 +17,4 @@ VIRTUAL-RUNTIME_init_manager = "systemd"
 VIRTUAL-RUNTIME_initscripts = ""
 DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"
 
-INITRAMFS_MAXSIZE = "235000"
+INITRAMFS_MAXSIZE = "400000"
diff --git a/meta-luv/recipes-bsp/sbbr/sbbr/README.md b/meta-luv/recipes-bsp/sbbr/sbbr/README.md
new file mode 100644
index 0000000000..06f0264005
--- /dev/null
+++ b/meta-luv/recipes-bsp/sbbr/sbbr/README.md
@@ -0,0 +1,2 @@
+UEFI-SCT
+========
diff --git a/meta-luv/recipes-bsp/sbbr/sbbr/sbbr-sct.patch b/meta-luv/recipes-bsp/sbbr/sbbr/sbbr-sct.patch
new file mode 100644
index 0000000000..3c2fb4be19
--- /dev/null
+++ b/meta-luv/recipes-bsp/sbbr/sbbr/sbbr-sct.patch
@@ -0,0 +1,277 @@
+diff --git a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTest.inf b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTest.inf
+index 10d9e8c..9deb345 100644
+--- a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTest.inf
++++ b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTest.inf
+@@ -84,4 +84,5 @@
+ 
+ [Protocols]
+   gEfiTestProfileLibraryGuid
++  gEfiTestRecoveryLibraryGuid
+   gBlackBoxEfiHIIPackageListProtocolGuid
+diff --git a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c
+index 4c63a08..6bd92ec 100644
+--- a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c
++++ b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c
+@@ -809,6 +809,7 @@ BBTestExitBootServicesConsistencyTest (
+   )
+ {
+   EFI_STANDARD_TEST_LIBRARY_PROTOCOL   *StandardLib;
++  EFI_TEST_RECOVERY_LIBRARY_PROTOCOL   *RecoveryLib;
+   EFI_STATUS                           Status;
+   EFI_TEST_ASSERTION                   AssertionType;
+   UINTN                                MapKey;
+@@ -817,6 +818,7 @@ BBTestExitBootServicesConsistencyTest (
+   UINTN                                DataSize;
+   UINT8                                Data[MAX_BUFFER_SIZE];
+   EFI_STATUS                           ReturnStatus;
++  UINTN                                RecoveryData[2], RecoveryDataSize;
+ 
+   //
+   // Init
+@@ -834,6 +836,16 @@ BBTestExitBootServicesConsistencyTest (
+     return Status;
+   }
+ 
++  RecoveryLib = NULL;
++
++  Status = gtBS->HandleProtocol (
++                   SupportHandle,
++                   &gEfiTestRecoveryLibraryGuid,
++                   (VOID **) &RecoveryLib);
++  if (EFI_ERROR(Status)) {
++    return Status;
++  }
++
+   Status = ImageTestCheckForCleanEnvironment (&Numbers);
+   if (EFI_ERROR(Status)) {
+     StandardLib->RecordAssertion (
+@@ -849,18 +861,12 @@ BBTestExitBootServicesConsistencyTest (
+                    );
+     return Status;
+   }
++  
++  RecoveryDataSize = sizeof(RecoveryData);
++  Status = RecoveryLib->ReadResetRecord(RecoveryLib, &RecoveryDataSize, RecoveryData);
+ 
+-  DataSize = MAX_BUFFER_SIZE;
+-  Status = gtRT->GetVariable (
+-                 L"ExitBootServicesTestVariable",             // VariableName
+-                 &gTestVendor1Guid,                           // VendorGuid
+-                 NULL,                                        // Attributes
+-                 &DataSize,                                   // DataSize
+-                 &ReturnStatus                                // Data
+-                 );
+-
+-  if (Status == EFI_SUCCESS) {
+-    goto CheckResult;
++  if (!EFI_ERROR(Status) && RecoveryData[0] == 1) {
++      goto CheckResult;
+   }
+ 
+   //
+@@ -899,19 +905,10 @@ BBTestExitBootServicesConsistencyTest (
+                          mImageHandle,
+                          MapKey
+                          );
+-  if (ReturnStatus == EFI_INVALID_PARAMETER) {
+-    AssertionType = EFI_TEST_ASSERTION_PASSED;
+-  } else {
+-    AssertionType = EFI_TEST_ASSERTION_FAILED;
+-  }
+-
+-  Status = gtRT->SetVariable (
+-                     L"ExitBootServicesTestVariable",                                                           // VariableName
+-                     &gTestVendor1Guid,                                                                         // VendorGuid
+-                     EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS, // Attributes
+-                     sizeof(EFI_STATUS),                        // DataSize
+-                     &ReturnStatus                              // Data
+-                     );
++  
++  RecoveryData[0] = 1;
++  RecoveryData[1] = ReturnStatus;
++  RecoveryLib->WriteResetRecord (RecoveryLib, sizeof(RecoveryData), RecoveryData);
+ 
+   //reset system
+   gtRT->ResetSystem (EfiResetCold, EFI_SUCCESS, 0, NULL);
+@@ -919,7 +916,7 @@ BBTestExitBootServicesConsistencyTest (
+   // get var to get the status
+ CheckResult:
+ 
+-  if (ReturnStatus == EFI_INVALID_PARAMETER) {
++  if (RecoveryData[1] == EFI_INVALID_PARAMETER) {
+     AssertionType = EFI_TEST_ASSERTION_PASSED;
+   } else {
+     AssertionType = EFI_TEST_ASSERTION_FAILED;
+@@ -933,18 +930,10 @@ CheckResult:
+                  L"%a:%d: the Status is - %r, expected status is %r",
+                  __FILE__,
+                  (UINTN)__LINE__,
+-                 ReturnStatus,
++                 RecoveryData[1],
+                  EFI_INVALID_PARAMETER
+                  );
+ 
+-  Status = gtRT->SetVariable (
+-                     L"ExitBootServicesTestVariable",                                                           // VariableName
+-                     &gTestVendor1Guid,                                                                         // VendorGuid
+-                     EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS, // Attributes
+-                     0,                               // DataSize
+-                     Data                             // Data
+-                     );
+-
+   Status = ImageTestCheckForCleanEnvironment (&Numbers);
+   if (EFI_ERROR(Status)) {
+     StandardLib->RecordAssertion (
+@@ -961,4 +950,3 @@ CheckResult:
+   }
+   return EFI_SUCCESS;
+ }
+-
+diff --git a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c
+index d0af10d..632c8df 100644
+--- a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c
++++ b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c
+@@ -192,9 +192,9 @@ BBTestLoadImageInterfaceTest (
+   //Checkpoint 8:
+   //4.1.2.8  Call LoadImage to load image for HII protocol
+   //
+-  BBTestLoadImageInterfaceTestCheckPoint8(StandardLib);
++  //BBTestLoadImageInterfaceTestCheckPoint8(StandardLib);
+ 
+-  BBTestLoadImageInterfaceTestCheckPoint9(StandardLib);
++  //BBTestLoadImageInterfaceTestCheckPoint9(StandardLib);
+ #endif  
+   return EFI_SUCCESS;
+ }
+diff --git a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h
+index da3277b..5457565 100644
+--- a/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h
++++ b/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h
+@@ -60,6 +60,7 @@ Abstract:
+ 
+ #include "ImageBBTest.h"
+ #include "ProtocolDefinition.h"
++#include EFI_TEST_PROTOCOL_DEFINITION(TestRecoveryLibrary)
+ 
+ typedef struct {
+   VOID          *Registration;
+diff --git a/SctPkg/TestCase/UEFI/EFI/BootServices/SbbrBootServices/BlackBoxTest/SbbrBootServicesBBTestFunction.c b/SctPkg/TestCase/UEFI/EFI/BootServices/SbbrBootServices/BlackBoxTest/SbbrBootServicesBBTestFunction.c
+index c88d60b..6fbd11a 100644
+--- a/SctPkg/TestCase/UEFI/EFI/BootServices/SbbrBootServices/BlackBoxTest/SbbrBootServicesBBTestFunction.c
++++ b/SctPkg/TestCase/UEFI/EFI/BootServices/SbbrBootServices/BlackBoxTest/SbbrBootServicesBBTestFunction.c
+@@ -235,6 +235,7 @@ BBTestMemoryMapTest (
+     //
+     // Checking for 64KB alignment
+     //
++	/*
+     if (MemoryMapDescriptor->PhysicalStart & (SIZE_64KB - 1)) {
+       StandardLib->RecordAssertion (
+                   StandardLib,
+@@ -248,6 +249,7 @@ BBTestMemoryMapTest (
+                   );
+       error = TRUE;
+     }
++	*/
+ 
+     //
+     // No issues found
+diff --git a/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini b/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini
+index 72e959d..e37a8d6 100644
+--- a/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini
++++ b/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini
+@@ -124,33 +124,33 @@
+ [Platform Specific]
+ ConsoleDevices            = yes
+ HiiConfigSupport          = yes
+-HiiFontSupport            = yes
+-GraphicalConsoleDevices   = yes
+-PointerDevices            = yes
+-BootFromDiskDevices       = yes
+-BootFromNetworkDevices    = yes
+-ValidateBootImageThruNet  = yes
+-UartDevices               = yes
+-PciBusSupport             = yes
+-UsbBusSupport             = yes
+-NVMExpressPassThru        = yes
+-BootFromNVMe              = yes
+-ExtScsiPassThru           = yes
+-DebugSupport              = yes
+-PlatformDriverOverride    = yes
+-AtaPassThru               = yes
+-UEFIIPv4Support           = yes
+-BootFromScsi              = yes
+-ExtScsiPassThruSupport    = yes
+-BootFromIScsi             = yes
+-EBCSupport                = yes
+-UEFIIPv6Support           = yes
+-VLANSupport               = yes
+-DNS4Support               = yes
+-DNS6Support               = yes
+-TLSSupport                = yes
+-HTTPSupport               = yes
+-EAPSupport                = yes
+-BlueToothSupport          = yes
+-IPSecSupport              = yes
++HiiFontSupport            = no
++GraphicalConsoleDevices   = no
++PointerDevices            = no
++BootFromDiskDevices       = no
++BootFromNetworkDevices    = no
++ValidateBootImageThruNet  = no
++UartDevices               = no
++PciBusSupport             = no
++UsbBusSupport             = no
++NVMExpressPassThru        = no
++BootFromNVMe              = no
++ExtScsiPassThru           = no
++DebugSupport              = no
++PlatformDriverOverride    = no
++AtaPassThru               = no
++UEFIIPv4Support           = no
++BootFromScsi              = no
++ExtScsiPassThruSupport    = no
++BootFromIScsi             = no
++EBCSupport                = no
++UEFIIPv6Support           = no
++VLANSupport               = no
++DNS4Support               = no
++DNS6Support               = no
++TLSSupport                = no
++HTTPSupport               = no
++EAPSupport                = no
++BlueToothSupport          = no
++IPSecSupport              = no
+ 
+diff --git a/SctPkg/TestCase/UEFI/EFI/Generic/SbbrRequiredUefiProtocols/BlackBoxTest/RequiredUefiProtocolsBBTestFunction.c b/SctPkg/TestCase/UEFI/EFI/Generic/SbbrRequiredUefiProtocols/BlackBoxTest/RequiredUefiProtocolsBBTestFunction.c
+index 6b149ee..448193b 100644
+--- a/SctPkg/TestCase/UEFI/EFI/Generic/SbbrRequiredUefiProtocols/BlackBoxTest/RequiredUefiProtocolsBBTestFunction.c
++++ b/SctPkg/TestCase/UEFI/EFI/Generic/SbbrRequiredUefiProtocols/BlackBoxTest/RequiredUefiProtocolsBBTestFunction.c
+@@ -85,7 +85,6 @@ BBTestMediaIoProtocolsTest (
+   UINTN                               NumberOfHandles;
+   SBBR_REQUIRED_PROTOCOL             Protocol[] = {
+                                         {EFI_LOAD_FILE_PROTOCOL_GUID, L"EFI_LOAD_FILE_PROTOCOL"},
+-                                        {EFI_LOAD_FILE2_PROTOCOL_GUID, L"EFI_LOAD_FILE2_PROTOCOL"},
+                                         {gEfiNullGuid, 0}
+                                       };
+   UINT32                              i;
+diff --git a/SctPkg/TestCase/UEFI/EFI/Generic/SbbrSysEnvConfig/BlackBoxTest/SysEnvConfigBBTestMain.c b/SctPkg/TestCase/UEFI/EFI/Generic/SbbrSysEnvConfig/BlackBoxTest/SysEnvConfigBBTestMain.c
+index 9ed7cf8..dcccd7c 100644
+--- a/SctPkg/TestCase/UEFI/EFI/Generic/SbbrSysEnvConfig/BlackBoxTest/SysEnvConfigBBTestMain.c
++++ b/SctPkg/TestCase/UEFI/EFI/Generic/SbbrSysEnvConfig/BlackBoxTest/SysEnvConfigBBTestMain.c
+@@ -99,15 +99,7 @@ EFI_BB_TEST_ENTRY_FIELD gBBTestEntryField[] = {
+     EFI_TEST_CASE_AUTO,
+     BBTestOsDiskFormatTest
+   },
+-  {
+-    SYSENVCONFIG_EBC_INTERPRETER_PRESENT_GUID,
+-    L"EbcInterfacePresent",
+-    L"Checking that an EBC interpreter is present in the system.",
+-    EFI_TEST_LEVEL_DEFAULT,
+-    gSupportProtocolGuid,
+-    EFI_TEST_CASE_AUTO,
+-    BBTestEbcInterfacePresentTest
+-  },
++ 
+   EFI_NULL_GUID
+ };
+ 
diff --git a/meta-luv/recipes-bsp/sbbr/sbbr_v1.0.bb b/meta-luv/recipes-bsp/sbbr/sbbr_v1.0.bb
new file mode 100644
index 0000000000..9d4b4b305e
--- /dev/null
+++ b/meta-luv/recipes-bsp/sbbr/sbbr_v1.0.bb
@@ -0,0 +1,101 @@
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+SUMMARY = "SBBR is a test suite that runs Server Base Boot Requirements UEFI tests."
+
+DESCRIPTION = "This Server Base Boot Requirements (SBBR) test suite is intended \
+for SBSA[2]-compliant 64-bit ARMv8 servers. It defines the base firmware requirements \
+for out-of-box support of any ARM SBSA-compatible Operating System or hypervisor. \
+The tests are expected to be minimal yet complete for booting a multi-core \
+ARMv8 server platform, while leaving plenty of room \
+for OEM or ODM innovations and design details."
+
+# Home Page
+HOMEPAGE = "https://github.com/UEFI/UEFI-SCT"
+
+LICENSE = "CLOSED"
+LIC_FILES_CHKSUM = ""
+
+SBBRVERSION="v1.0"
+PV="${SBBRVERSION}+git${SRCPV}"
+
+S = "${WORKDIR}/git"
+
+inherit deploy
+
+# No information for SRC_URI yet (only an external source tree was specified)
+SRCREV  = "1ff61591f11a1b92518f2273ffeacaa90e474e5e"
+SRC_URI = "git://github.com/UEFI/UEFI-SCT.git;protocol=https;branch=sbbr;user="${SCTUSERNAME}":"${SCTPASSWORD}" \
+           file://sbbr-sct.patch \
+          "
+
+# NOTE: no Makefile found, unable to determine what needs to be done
+
+do_configure () {
+	# Specify any needed configure commands here
+	:
+	echo "do_configure()"
+	# Specify any needed configure commands here
+	rm -rf edk2
+	git clone https://github.com/tianocore/edk2
+	cd edk2
+	git checkout c0584d0bdd4463551db8f8c62a5e2936ec97b407
+	ln -s ../SctPkg SctPkg
+	chmod +x SctPkg/build_sbbr.sh
+	cd ..
+
+	mkdir -p "tools/gcc"
+	cd "tools/gcc"
+	wget -nv "https://releases.linaro.org/components/toolchain/binaries/4.9-2016.02/aarch64-linux-gnu/gcc-linaro-4.9-2016.02-x86_64_aarch64-linux-gnu.tar.xz"
+	#Untar the GCC Linaro files.
+	tar -xf gcc-linaro-4.9-2016.02-x86_64_aarch64-linux-gnu.tar.xz
+	cd ../..
+}
+
+do_compile () {
+	# Specify compilation commands here
+	:
+	echo "$PWD: do_compile()"
+	export PATH=$PATH:"$PWD/tools/gcc/gcc-linaro-4.9-2016.02-x86_64_aarch64-linux-gnu/bin"
+	export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE PATH"
+	echo "New PATH = $PATH"
+	export CROSS_COMPILE="$PWD/tools/gcc/gcc-linaro-4.9-2016.02-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-"
+	export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE CROSS_COMPILE"
+	echo "NEW CROSS_COMPILE: $CROSS_COMPILE"
+
+	cd edk2
+	./SctPkg/build_sbbr.sh AARCH64 GCC
+	cd ..
+}
+
+do_install () {
+	# Specify install commands here
+	:
+	echo "do_install()"
+	echo "Destination Directory: ${D}"
+	echo "Source Directory: ${B}"
+	cp -r ${B}/edk2/Build/SbbrSct/DEBUG_GCC49/SctPackageAARCH64 ${D}/sbbr
+}
+
+do_deploy () {
+	# Specify deploy commands here
+	:
+	echo "do_deploy()"
+	echo "Destination Directory: ${DEPLOYDIR}"
+	echo "Source Directory: ${D}"
+	install -d ${DEPLOYDIR}
+	cp -r ${D}/sbbr ${DEPLOYDIR}/sbbr
+}
+
+addtask deploy before do_build after do_install
diff --git a/meta-luv/recipes-bsp/sbsa/files/compile.sh b/meta-luv/recipes-bsp/sbsa/files/compile.sh
new file mode 100755
index 0000000000..fae365c3df
--- /dev/null
+++ b/meta-luv/recipes-bsp/sbsa/files/compile.sh
@@ -0,0 +1,28 @@
+#!/usr/bin/env bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+cd ${1}/edk2
+
+export GCC49_AARCH64_PREFIX=${1}/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
+
+echo "do_compile: Initializing EDK2 for building."
+set --
+source edksetup.sh
+
+echo "do_compile: Building BaseTools."
+make -C BaseTools/Source/C
+
+echo "do_compile: Building SBSA."
+source AppPkg/Applications/sbsa-acs/tools/scripts/avsbuild.sh
diff --git a/meta-luv/recipes-bsp/sbsa/sbsa.bb b/meta-luv/recipes-bsp/sbsa/sbsa.bb
new file mode 100644
index 0000000000..8b1af24e99
--- /dev/null
+++ b/meta-luv/recipes-bsp/sbsa/sbsa.bb
@@ -0,0 +1,107 @@
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+LICENSE = "CLOSED"
+LIC_FILES_CHKSUM = ""
+
+# SCT files placed in ${WORKDIR}/git
+# GCC files placed in ${WORKDIR}/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu
+SRC_URI = "git://github.com/ARM-software/sbsa-acs.git;protocol=https \
+           https://releases.linaro.org/components/toolchain/binaries/5.3-2016.05/aarch64-linux-gnu/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz \
+           file://compile.sh"
+
+PV = "1.0+git${SRCPV}"
+SRCREV = "${AUTOREV}"
+
+# GCC checksum.
+SRC_URI[md5sum] = "24ac2e26f50f49f3043f281440b41bba"
+
+S = "${WORKDIR}/git"
+
+inherit deploy
+
+do_configure () {
+    # Downloading EDK2 into ${WORKDIR}/edk2.
+    echo "do_configure: Checking if EDK2 repository already exists."
+    cd ${WORKDIR}
+    if [ ! -d ${WORKDIR}/edk2 ]
+    then
+        echo "do_configure: Cloning EDK2 repository."
+        git clone -b UDK2017 https://github.com/tianocore/edk2.git
+    fi
+
+    # Linking SBSA and EDK2.
+    echo "do_configure: Linking SBSA to EDK2."
+    cd ${WORKDIR}/git/uefi_app
+    if [ -d val ]
+    then
+        echo "do_configure: Existing val found, deleted."
+        rm val
+    fi
+    if [ -d pal ]
+    then
+        echo "do_configure: Existing pal found, deleted."
+        rm pal
+    fi
+    if [ -d test_pool ]
+    then
+        echo "do_configure: Existing test_pool found, deleted."
+        rm test_pool
+    fi
+    cd ${WORKDIR}/edk2/AppPkg/Applications
+    if [ -d sbsa-acs ]
+    then
+        echo "do_configure: Existing sbsa-acs found, deleted."
+        rm sbsa-acs
+    fi
+    cd ${WORKDIR}/git
+    set -- "${WORKDIR}/git" "${WORKDIR}/edk2"
+    . ${WORKDIR}/git/tools/scripts/avssetup.sh
+    set --
+
+    # Modifying EDK2 to build SBSA.
+    echo "do_configure: Modifying edk2/ShellPkg/ShellPkg.dsc to build SBSA."
+    if ! grep -q SbsaPalLib "${WORKDIR}/edk2/ShellPkg/ShellPkg.dsc"
+    then
+        sed -i '/LibraryClasses.common/ a \ \ SbsaPalLib|AppPkg/Applications/sbsa-acs/platform/pal_uefi/SbsaPalLib.inf' ${WORKDIR}/edk2/ShellPkg/ShellPkg.dsc
+    fi
+    if ! grep -q SbsaValLib "${WORKDIR}/edk2/ShellPkg/ShellPkg.dsc"
+    then
+        sed -i '/LibraryClasses.common/ a \ \ SbsaValLib|AppPkg/Applications/sbsa-acs/val/SbsaValLib.inf' ${WORKDIR}/edk2/ShellPkg/ShellPkg.dsc
+    fi
+    if ! grep -q SbsaAvs "${WORKDIR}/edk2/ShellPkg/ShellPkg.dsc"
+    then
+        sed -i '/Components/ a \ \ AppPkg/Applications/sbsa-acs/uefi_app/SbsaAvs.inf' ${WORKDIR}/edk2/ShellPkg/ShellPkg.dsc
+    fi
+}
+
+do_compile () {
+    cd ${WORKDIR}
+    ./compile.sh ${WORKDIR}
+}
+
+do_install () {
+    echo "do_install: Copying SBSA files to destination ${D}"
+    mkdir ${D}/sbsa
+	cp ${WORKDIR}/edk2/Build/Shell/DEBUG_GCC49/AARCH64/Sbsa.efi ${D}/sbsa/Sbsa.efi
+	cp ${WORKDIR}/edk2/ShellBinPkg/UefiShell/AArch64/Shell.efi ${D}/sbsa/Shell.efi
+}
+
+do_deploy () {
+    echo "do_deploy: Deploying SBSA files to destionation ${DEPLOYDIR}"
+    install -d ${DEPLOYDIR}
+    cp -r ${D}/sbsa ${DEPLOYDIR}/sbsa
+}
+
+addtask deploy before do_build after do_install
diff --git a/meta-luv/recipes-bsp/sdei/files/compile.sh b/meta-luv/recipes-bsp/sdei/files/compile.sh
new file mode 100755
index 0000000000..5ee4776ae7
--- /dev/null
+++ b/meta-luv/recipes-bsp/sdei/files/compile.sh
@@ -0,0 +1,28 @@
+#!/usr/bin/env bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+cd ${1}/edk2
+
+
+echo "do_compile: Initializing EDK2 for building."
+set --
+source edksetup.sh
+
+echo "do_compile: Building BaseTools."
+make -C BaseTools/Source/C
+
+
+echo "do_compile: Building SDEI."
+source AppPkg/Applications/sdei-acs/scripts/acsbuild.sh
diff --git a/meta-luv/recipes-bsp/sdei/sdei.bb b/meta-luv/recipes-bsp/sdei/sdei.bb
new file mode 100644
index 0000000000..4ea7f62431
--- /dev/null
+++ b/meta-luv/recipes-bsp/sdei/sdei.bb
@@ -0,0 +1,64 @@
+
+#
+# This file was derived from the 'Hello World!' example recipe in the
+# Yocto Project Development Manual.
+#
+
+DESCRIPTION = "efi app for sdei"
+LICENSE = "CLOSED"
+
+
+FILESEXTRAPATHS_prepend := "${THISDIR}/files:"
+inherit deploy
+
+SRC_URI =  " https://github.com/tianocore/edk2/archive/dbc85eb.zip;name=name2 \
+             https://github.com/ARM-software/arm-enterprise-acs/archive/54998dc.zip;name=name3 \
+             https://releases.linaro.org/components/toolchain/binaries/5.3-2016.05/aarch64-linux-gnu/gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu.tar.xz;name=name4 \
+	     file://compile.sh"
+SRC_URI[name2.md5sum] = "00667c21c5f6109ffdaaec5e79f30771"
+SRC_URI[name3.md5sum] = "84206f436b3124959bee817ff679ee89"
+SRC_URI[name4.md5sum] = "24ac2e26f50f49f3043f281440b41bba"
+
+
+
+do_unpack () {
+  /usr/bin/unzip ${DL_DIR}/dbc85eb.zip -d ${S}/
+  mv ${S}/edk2-dbc85eb993439a7006bb20091c1cc6de43d19e80/ ${S}/edk2/
+
+  /usr/bin/unzip ${DL_DIR}/54998dc.zip -d ${S}/
+  mv ${S}/arm-enterprise-acs-54998dc56761a7881a2823352e3375df0bfd0a08/ ${S}/arm-enterprise-acs/
+
+  tar -xf ${DL_DIR}/gcc-linaro*.tar.xz
+  mv gcc-linaro-5.3.1-2016.05-x86_64_aarch64-linux-gnu/ ${S}/gcc-linaro/
+  ls
+}
+
+do_configure () {
+cp -r arm-enterprise-acs/sdei edk2/AppPkg/Applications/sdei-acs
+sed -i '/LibraryClasses.common/ a\ SdeiValLib|AppPkg/Applications/sdei-acs/val/SdeiValLib.inf' edk2/ShellPkg/ShellPkg.dsc
+sed -i '/LibraryClasses.common/ a\ SdeiPalLib|AppPkg/Applications/sdei-acs/platform/pal_uefi/SdeiPalLib.inf' edk2/ShellPkg/ShellPkg.dsc
+sed -i '/Components/ a\ AppPkg/Applications/sdei-acs/uefi_app/SdeiAcs.inf' edk2/ShellPkg/ShellPkg.dsc
+}
+
+do_compile () {
+   export GCC49_AARCH64_PREFIX=${S}/gcc-linaro/bin/aarch64-linux-gnu-
+   /bin/bash ${THISDIR}/files/compile.sh ${S}
+}
+
+
+do_install () {
+    echo "do_install: Copying SDEI files to destination ${D}"
+    mkdir ${D}/sdei
+    cp ${S}/edk2/Build/Shell/DEBUG_GCC49/AARCH64/Sdei.efi ${D}/sdei/Sdei.efi
+    cp ${S}/edk2/ShellBinPkg/UefiShell/AArch64/Shell.efi ${D}/sdei/Shell.efi
+}
+
+
+do_deploy () {
+    echo "do_deploy: Deploying SDEI files to destination ${DEPLOYDIR}"
+    install -d ${DEPLOYDIR}
+    cp -r ${D}/sdei ${DEPLOYDIR}/sdei
+}
+
+addtask deploy before do_build after do_install
+
diff --git a/meta-luv/recipes-core/efivarfs/efivarfs-test.bb b/meta-luv/recipes-core/efivarfs/efivarfs-test.bb
index 0853e52597..190d683dd9 100644
--- a/meta-luv/recipes-core/efivarfs/efivarfs-test.bb
+++ b/meta-luv/recipes-core/efivarfs/efivarfs-test.bb
@@ -71,4 +71,3 @@ do_install() {
 }
 
 LUV_TEST_LOG_PARSER="luv-parser-efivarfs"
-LUV_TEST="efivarfs"
diff --git a/meta-luv/recipes-core/fwts/fwts/sbbr-fwts.patch b/meta-luv/recipes-core/fwts/fwts/sbbr-fwts.patch
new file mode 100644
index 0000000000..69e92fe1a3
--- /dev/null
+++ b/meta-luv/recipes-core/fwts/fwts/sbbr-fwts.patch
@@ -0,0 +1,17 @@
+diff --git a/src/acpi/method/method.c b/src/acpi/method/method.c
+index 1715a39..a325b8a 100644
+--- a/src/acpi/method/method.c
++++ b/src/acpi/method/method.c
+@@ -573,11 +573,7 @@ static void method_test_AEI_return(
+ 
+ static int method_test_AEI(fwts_framework *fw)
+ {
+-	if (fw->flags & FWTS_FLAG_TEST_SBBR)
+-		return method_evaluate_method(fw, METHOD_MANDATORY,
+-			"_AEI", NULL, 0, method_test_AEI_return, NULL);
+-	else
+-		return method_evaluate_method(fw, METHOD_OPTIONAL,
++	return method_evaluate_method(fw, METHOD_OPTIONAL,
+ 			"_AEI", NULL, 0, method_test_AEI_return, NULL);
+ }
+ 
diff --git a/meta-luv/recipes-core/fwts/fwts_git.bb b/meta-luv/recipes-core/fwts/fwts_git.bb
index 62d2430218..0d2d751216 100644
--- a/meta-luv/recipes-core/fwts/fwts_git.bb
+++ b/meta-luv/recipes-core/fwts/fwts_git.bb
@@ -9,6 +9,7 @@ PV = "V17.12.00+git${SRCPV}"
 SRCREV = "df2784c6fbff02288c736f85354b22f46dc193f4"
 SRC_URI = "git://kernel.ubuntu.com/hwe/fwts.git \
            file://luv-parser-fwts \
+           file://sbbr-fwts.patch \
           "
 
 S = "${WORKDIR}/git"
@@ -52,8 +53,7 @@ do_install_append() {
 }
 
 LUV_TEST_LOG_PARSER="luv-parser-fwts"
-LUV_TEST_ARGS="-r stdout -q --uefitests --log-format='%owner;%field ' \
-	      --batch"
+LUV_TEST_ARGS="-r stdout -q --sbbr"
 
 FILES_${PN} += "${libdir}/fwts/lib*${SOLIBS}"
 FILES_${PN} += "/lib/modules/${KERNEL_VERSION}/extra/efi_runtime.ko"
diff --git a/meta-luv/recipes-core/images/core-image-efi-initramfs.bb b/meta-luv/recipes-core/images/core-image-efi-initramfs.bb
index 952953483d..868d37c06e 100644
--- a/meta-luv/recipes-core/images/core-image-efi-initramfs.bb
+++ b/meta-luv/recipes-core/images/core-image-efi-initramfs.bb
@@ -8,7 +8,7 @@ IMAGE_INSTALL = "\
     util-linux-mount util-linux-umount kmod sed tar net-tools \
     shadow util-linux procps efivarfs-test pstore-test \
     plymouth plymouth-set-default-theme kernel-efi-warnings linux-firmware-luv kexec \
-    acpixtract iasl \
+    acpixtract iasl sbsa-acs-drv sbsa-acs-app sdei-acs-drv sdei-acs-app \
     "
 
 X86_ADDITIONS = "chipsec python-codecs python-subprocess vmcore-dmesg bits \
diff --git a/meta-luv/recipes-core/images/luv-image.inc b/meta-luv/recipes-core/images/luv-image.inc
index b8517091cc..55275e6b87 100644
--- a/meta-luv/recipes-core/images/luv-image.inc
+++ b/meta-luv/recipes-core/images/luv-image.inc
@@ -3,6 +3,7 @@ LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda
 
 DEPENDS_append_x86 = " grub-efi bits"
 DEPENDS_append_x86-64 = " grub-efi bits"
+DEPENDS_${PN} = "bits sbbr"
 
 HDDDIR = "${S}/hddimg"
 
@@ -24,7 +25,7 @@ COMMON_CMDLINE_x86 += "splash nomodeset crash_kexec_post_notifiers"
 
 # Unlike the += operand, _append's do not insert a space between the current value
 # and the appended string. Thus, we add them.
-CMDLINE_append_aarch64 = " acpi=on"
+CMDLINE_append_aarch64 = " acpi=on crashkernel=256M earlycon uefi_debug ${ACS_CMDLINE_APPEND}"
 CMDLINE_append_x86 = "${COMMON_CMDLINE_x86}"
 CMDLINE_append_x86-64 = "${COMMON_CMDLINE_x86}"
 
diff --git a/meta-luv/recipes-core/images/luv-live-image.bb b/meta-luv/recipes-core/images/luv-live-image.bb
index b7a0f6630e..1bf7b54cbc 100644
--- a/meta-luv/recipes-core/images/luv-live-image.bb
+++ b/meta-luv/recipes-core/images/luv-live-image.bb
@@ -9,7 +9,7 @@ MACHINE_FEATURES += "efi"
 
 CMDLINE = "${CMDLINE_BASE}"
 
-GRUB_TIMEOUT = "2"
+GRUB_TIMEOUT = "1"
 
 inherit image-live
 
@@ -31,8 +31,8 @@ build_img() {
     BYTES_PER_SECTOR=512
     MiB=$(expr 1024 \* 1024)
     VFAT_RESULTS=${DEPLOY_DIR_IMAGE}/${PN}-results.hddimg
-    # 16MB of space to store test results
-    VFAT_RESULTS_SPACE_MiB=16
+    # 128 MB of space for test results and SCT installation
+    VFAT_RESULTS_SPACE_MiB=128
     VFAT_RESULTS_SPACE=$(expr $VFAT_RESULTS_SPACE_MiB \* $MiB)
     VFAT_RESULTS_BLOCKS=$(expr $VFAT_RESULTS_SPACE / 1024)
     # TODO: do we need to dynamically generate the UUID?
@@ -51,6 +51,9 @@ build_img() {
     mkdosfs -C ${VFAT_RESULTS} -S ${BYTES_PER_SECTOR} -i ${VFAT_RESULTS_UUID} \
             -n ${VFAT_RESULTS_LABEL} $VFAT_RESULTS_BLOCKS
 
+    mmd -i ${VFAT_RESULTS} ::/sbsa_results
+
+    mmd -i ${VFAT_RESULTS} ::/sdei_results
     dd if=/dev/zero of=${IMG} bs=${BYTES_PER_SECTOR} count=1
 
     # Now that we are calculating sizes in MiB make sure that the value
diff --git a/meta-luv/recipes-core/images/luv-netboot-image.bb b/meta-luv/recipes-core/images/luv-netboot-image.bb
index d6eca7b468..77dde4f93e 100644
--- a/meta-luv/recipes-core/images/luv-netboot-image.bb
+++ b/meta-luv/recipes-core/images/luv-netboot-image.bb
@@ -25,7 +25,8 @@ do_mkimage[depends] += "dosfstools-native:do_populate_sysroot \
                         mtools-native:do_populate_sysroot \
                         cdrtools-native:do_populate_sysroot \
                         virtual/kernel:do_deploy \
-			${_BITSDEPENDS}"
+                        ${_BITSDEPENDS} \
+                        ${_SBBRDEPENDS}"
 
 do_bootimg[noexec] = "1"
 
@@ -33,6 +34,8 @@ do_populate_image() {
 	install -d ${HDDDIR}${EFIDIR}
 	if [ "${TARGET_ARCH}" = "aarch64" ]; then
 		echo "${DEST_EFI_LOADER_IMAGE}" > ${HDDDIR}${EFIDIR}/startup.nsh
+		efi_populate_sbbr ${HDDDIR}
+		efi_populate_sbsa ${HDDDIR}
 		install -m 0644 ${DEPLOY_DIR_IMAGE}/${GRUB_EFI_LOADER_IMAGE} ${HDDDIR}${EFIDIR}/${DEST_EFI_LOADER_IMAGE}
 	fi
 	install -m 0644 ${GRUBCFG} ${HDDDIR}${EFIDIR}
diff --git a/meta-luv/recipes-core/kernel_efi_warnings/kernel-efi-warnings_0.1.bb b/meta-luv/recipes-core/kernel_efi_warnings/kernel-efi-warnings_0.1.bb
index a0fde3c30b..85eec505de 100644
--- a/meta-luv/recipes-core/kernel_efi_warnings/kernel-efi-warnings_0.1.bb
+++ b/meta-luv/recipes-core/kernel_efi_warnings/kernel-efi-warnings_0.1.bb
@@ -20,5 +20,3 @@ do_install() {
 }
 
 LUV_TEST_LOG_PARSER="luv-parser-kernel-efi-warnings"
-LUV_TEST="kernel-efi-warnings"
-LUV_TEST_ARGS=""
diff --git a/meta-luv/recipes-core/luv-test/luv-test.bb b/meta-luv/recipes-core/luv-test/luv-test.bb
index 164a61692f..98875a5fcd 100644
--- a/meta-luv/recipes-core/luv-test/luv-test.bb
+++ b/meta-luv/recipes-core/luv-test/luv-test.bb
@@ -36,6 +36,9 @@ SRC_URI += "file://luv-test-manager file://luv-test-parser \
             file://luv-reboot-poweroff.service \
             file://luv-reboot-poweroff \
             file://luv-message \
+            file://luv-collect-results \
+            file://luv-sdei-test \
+            file://luv-sbsa-test \
           "
 
 RDEPENDS_${PN}+= "kernel-modules curl iputils iproute2 bash init-ifupdown dhcp-client gzip"
@@ -84,6 +87,11 @@ do_install_append() {
        install -m 0644 ${WORKDIR}/luv-scripts ${D}${datadir}/luv/html
        install -m 0644 ${WORKDIR}/luv-css-styles ${D}${datadir}/luv/html
 
+       # Install luv-collect-results script
+       install -m 755 ${WORKDIR}/luv-collect-results ${D}${sysconfdir}/
+       install -m 755 ${WORKDIR}/luv-sbsa-test ${D}${sysconfdir}/
+       install -m 755 ${WORKDIR}/luv-sdei-test ${D}${sysconfdir}/
+
        install -d ${D}${systemd_unitdir}/system
 
        install -m 0644 ${WORKDIR}/luv-test-manager.service ${D}${systemd_unitdir}/system
diff --git a/meta-luv/recipes-core/luv-test/luv-test/luv-collect-results b/meta-luv/recipes-core/luv-test/luv-test/luv-collect-results
new file mode 100644
index 0000000000..3d862b4da9
--- /dev/null
+++ b/meta-luv/recipes-core/luv-test/luv-test/luv-collect-results
@@ -0,0 +1,220 @@
+#!/usr/bin/env python
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import sys
+import os
+import re
+import codecs
+
+def log_fwts(d):
+    testCategory = ""
+    testName = ""
+    testPasses = 0
+    testFails = 0
+    testSkips = 0
+    totalPasses = 0
+    totalFails = 0
+    totalSkips = 0
+
+    # Finding latest FWTS results directory.
+    directory = os.listdir(d)
+    fwtsDir = ""
+    for folder in directory:
+        if "luv-results-" in folder and folder > fwtsDir:
+            fwtsDir = folder
+
+    # Opening FWTS raw output file.
+    fwtsRawPath = os.path.join(d, fwtsDir, "raw", "fwts")
+    try:
+        fwtsRaw = open(fwtsRawPath, "r")
+    except IOError:
+        print ("FWTS raw results file \"%s\" could not be opened, skipping." % fwtsRawPath)
+        return -1
+
+    # Printing .MD file header for FWTS results.
+    outFile.write("# FWTS Test Results\n")
+    logs = fwtsRaw.read()
+    outFile.write(logs)
+
+
+def log_sbbr(d):
+    testCategory = ""
+    testName = ""
+    testCase = ""
+    testDescription = ""
+    testPasses = 0
+    testWarnings = 0
+    testErrors = 0
+    totalPasses = 0
+    totalWarnings = 0
+    totalErrors = 0
+
+    # Finding SCT test results.
+    sbbrDir = os.path.join(d, "SCT", "Log")
+    if os.path.isdir(sbbrDir) == False:
+        print ("SBBR SCT results directory \"%s\" not found.  Skipping." % sbbrDir)
+        return -1
+
+    # Printing .MD file header for SCT results.
+    outFile.write("# UEFI SBBR SCT Test Results\n")
+    outFile.write("| Category | Test File | Test Case | Description | Passes | Warnings | Errors |\n")
+    outFile.write("| :--- | :--- | :--- | :--- | ---: | ---: | ---: |\n")
+
+    # Recursively walking through SBBR results folders.
+    for dirpath, dirnames, filenames in os.walk(sbbrDir):
+        for entry in filenames:
+            if ".log" in entry:
+                path, testName = os.path.split(dirpath)
+                testName = testName.split("0")[0]
+                path, testCategory = os.path.split(path)
+                with codecs.open(os.path.join(dirpath, entry), mode="r", encoding="utf-16") as logfile:
+                    i = 1
+                    while True:
+                        line = logfile.readline()
+                        if line == "":
+                            break
+                        if i == 2:
+                            testCase = line.rstrip()
+                        if i == 11:
+                            testDescription = line.rstrip()
+                        if "Passes..........." in line:
+                            testPasses = int(line.split()[1])
+                        if "Warnings........." in line:
+                            testWarnings = int(line.split()[1])
+                        if "Errors..........." in line:
+                            testErrors = int(line.split()[1])
+                        i = i + 1
+                    outFile.write("| %s | %s | %s | %s | %d | %d | %d |\n" % (testCategory, testName, testCase, testDescription, testPasses, testWarnings, testErrors))
+                    totalPasses = totalPasses + testPasses
+                    totalWarnings = totalWarnings + testWarnings
+                    totalErrors = totalErrors + testErrors
+
+    # Print totals.
+    outFile.write("| Total | | | | %d | %d | %d |" % (totalPasses, totalWarnings, totalErrors))
+
+def log_sbsa(d):
+    sbsaDir = os.path.join(d, "sbsa_results")
+    if os.path.isdir(sbsaDir) == False:
+        print ("SBSA results results directory \"%s\" not found.  Skipping." % sbsaDir)
+        return -1
+
+    uefi = "not found";
+    linux = "not found";
+    for entry in os.listdir(sbsaDir):
+        if(entry == "uefi"):
+            sbsaUefiLogs = os.path.join(sbsaDir, "uefi", "SbsaResults.log")
+            try:
+                f = open(sbsaUefiLogs, "r")
+            except IOError:
+                print ("SBSA UEFI results file \"%s\" could not be opened, skipping." % sbsaUefiLogs)
+                continue
+            logs = f.read()
+            outFile.write("\n\nSBSA UEFI Test Results\n\n")
+            outFile.write(logs)
+            uefi = "collected"
+        if(entry == "linux"):
+            sbsaLinuxLogs = os.path.join(sbsaDir, "linux", "SbsaResults.log")
+            try:
+                f = open(sbsaLinuxLogs, "r")
+            except IOError:
+                print ("SBSA Linux results file \"%s\" could not be opened, skipping." % sbsaLinuxLogs)
+                continue
+            logs = f.read()
+            outFile.write("\n\nSBSA Linux Test Results\n\n")
+            outFile.write(logs)
+            linux = "collected"
+    print ("SBSA Results for linux %s\n" % linux)
+    print ("SBSA Results for UEFI %s\n" % uefi)
+
+def log_sdei(d):
+    sdeiDir = os.path.join(d, "sdei_results")
+    if os.path.isdir(sdeiDir) == False:
+        print ("SDEI results results directory \"%s\" not found.  Skipping." % sdeiDir)
+        return -1
+
+    uefi = "not found";
+    linux = "not found";
+    for entry in os.listdir(sdeiDir):
+        if(entry == "uefi"):
+            sdeiUefiLogs = os.path.join(sdeiDir, "uefi", "SdeiResults.log")
+            try:
+                f = open(sdeiUefiLogs, "r")
+            except IOError:
+                print ("SDEI UEFI results file \"%s\" could not be opened, skipping." % sdeiUefiLogs)
+                continue
+            logs = f.read()
+            outFile.write("\n\nSDEI UEFI Test Results\n\n")
+            outFile.write(logs)
+            uefi = "collected"
+        if(entry == "linux"):
+            sdeiLinuxLogs = os.path.join(sdeiDir, "linux", "SdeiResults.log")
+            try:
+                f = open(sdeiLinuxLogs, "r")
+            except IOError:
+                print ("SDEI Linux results file \"%s\" could not be opened, skipping." % sdeiLinuxLogs)
+                continue
+            logs = f.read()
+            outFile.write("\n\nSDEI Linux Test Results\n\n")
+            outFile.write(logs)
+            linux = "collected"
+    print ("SDEI Results for linux %s\n" % linux)
+    print ("SDEI Results for UEFI %s\n" % uefi)
+
+
+# Script entry point.
+
+# This script needs to be run on a stripped out yocto distribution so we can't use argparse.
+if "-h" in sys.argv or "--help" in sys.argv:
+    print ("Usage:")
+    print (" python %s [-h] LUV_RESULTS OUTPUT_FILE" % sys.argv[0])
+    print ("Options:")
+    print (" -h, --help              Display this help and exit.")
+    print (" LUV_RESULTS             Path to luv-results directory/drive.")
+    print (" OUTPUT_FILE             File for script output, must have .md file extension.")
+    exit()
+
+arg_directory = sys.argv[1]
+arg_output = sys.argv[2]
+
+# Validating parameter and opening output file.
+filename, fileext = os.path.splitext(arg_output)
+if fileext != ".md" and fileext != ".MD":
+    print ("Output file must have .md file extension. Exiting.")
+    exit()
+try:
+    outFile = open(arg_output, "w")
+except IOError:
+    print ("Could not open \"%s\" for writing. Exiting." % arg_output)
+    exit()
+
+# Scanning FWTS.
+print ("Gathering FWTS test results...")
+log_fwts(arg_directory)
+
+# Scanning SBBR.
+print ("Gathering UEFI SBBR SCT test results...")
+log_sbbr(arg_directory)
+
+# Scanning SBSA.
+print ("Gathering SBSA test results...")
+log_sbsa(arg_directory)
+
+# Scanning SBSA.
+print ("Gathering SDEI test results...")
+log_sdei(arg_directory)
+
+outFile.close()
+
+print ("Done, test results can be found in \"%s\"" % arg_output)
diff --git a/meta-luv/recipes-core/luv-test/luv-test/luv-message b/meta-luv/recipes-core/luv-test/luv-test/luv-message
index 50edf1fee5..fa3f95ad69 100755
--- a/meta-luv/recipes-core/luv-test/luv-test/luv-message
+++ b/meta-luv/recipes-core/luv-test/luv-test/luv-message
@@ -8,7 +8,7 @@ luv_msg_write() {
 
     if [ $# == 2 ]; then
          sleep $2
-         plymouth_hide "$1"
+         /bin/plymouth hide-message --text="$1"
     fi
 
     echo "$1" >&2
diff --git a/meta-luv/recipes-core/luv-test/luv-test/luv-sbsa-test b/meta-luv/recipes-core/luv-test/luv-test/luv-sbsa-test
new file mode 100644
index 0000000000..a359ddb052
--- /dev/null
+++ b/meta-luv/recipes-core/luv-test/luv-test/luv-sbsa-test
@@ -0,0 +1,18 @@
+#!/bin/bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+insmod /lib/modules/4.14.0-efitest/extra/sbsa_acs.ko
+mkdir -p $1/sbsa_results/linux
+sbsa > $1/sbsa_results/linux/SbsaResults.log
diff --git a/meta-luv/recipes-core/luv-test/luv-test/luv-sdei-test b/meta-luv/recipes-core/luv-test/luv-test/luv-sdei-test
new file mode 100644
index 0000000000..d3d06e2c4d
--- /dev/null
+++ b/meta-luv/recipes-core/luv-test/luv-test/luv-sdei-test
@@ -0,0 +1,20 @@
+#!/bin/bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+insmod /lib/modules/4.14.0-efitest/extra/sdei_acs.ko
+
+mkdir -p $1/sdei_results/linux
+
+sdei > $1/sdei_results/linux/SdeiResults.log
diff --git a/meta-luv/recipes-core/luv-test/luv-test/luv-test-manager b/meta-luv/recipes-core/luv-test/luv-test/luv-test-manager
index f1e2176006..cbf6a3135d 100644
--- a/meta-luv/recipes-core/luv-test/luv-test/luv-test-manager
+++ b/meta-luv/recipes-core/luv-test/luv-test/luv-test-manager
@@ -289,6 +289,11 @@ cat ${LUV_SAVE_RESULTS_DIR}/luv.results | awk '/\[\+/  { units += 1 }
 cat /tmp/testsuites | html_inline ${LUV_HTML_REPORT} | tee -a /tmp/luv.results \
          ${LUV_SAVE_RESULTS_DIR}/luv.results
 
+# test SBSA compliance on luv
+sh /etc/luv-sbsa-test ${LUV_STORAGE}
+# collecting test results
+python3 /etc/luv-collect-results ${LUV_STORAGE} ${LUV_STORAGE}/results.md
+
 result=$(cat /tmp/testsuites)
 luv_msg_write "$result"
 sleep 2
diff --git a/meta-luv/recipes-kernel/linux/linux-yocto-efi-test_4.14.bb b/meta-luv/recipes-kernel/linux/linux-yocto-efi-test_4.14.bb
index f02dfa5465..b4b590efa7 100644
--- a/meta-luv/recipes-kernel/linux/linux-yocto-efi-test_4.14.bb
+++ b/meta-luv/recipes-kernel/linux/linux-yocto-efi-test_4.14.bb
@@ -59,7 +59,7 @@ KERNEL_FEATURES_remove= " features/debug/printk.scc"
 
 # Override SRC_URI in a bbappend file to point at a different source
 # tree if you do not want to build from Linus' tree.
-SRC_URI = "git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git;protocol=git;branch=${KBRANCH};name=machine"
+SRC_URI = "git://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux;protocol=https;branch=${KBRANCH};name=machine"
 
 # These patches are under discussion on ML
 SRC_URI += "file://0001-serial-SPCR-check-bit-width-for-the-16550-UART.patch  \
@@ -80,6 +80,7 @@ SRC_URI += "file://0001-PCI-Vulcan-AHCI-PCI-bar-fix-for-Broadcom-Vulcan-earl.pat
             file://0001-selftests-change-reboot-flag-location.patch \
             file://0001-pstore-test-remove-log-directory.patch \
             file://0001-x86-mttr-Update-only-valid-variable-range-MTRRs.patch \
+            file://0001-Enterprise-acs-linux-v4.13.patch \
            "
 
 COMMON_CFG_x86 = " file://qemux86/modules.cfg \
diff --git a/meta/conf/bitbake.conf b/meta/conf/bitbake.conf
index 9696273acc..11d8888bea 100644
--- a/meta/conf/bitbake.conf
+++ b/meta/conf/bitbake.conf
@@ -763,7 +763,7 @@ INITRAMFS_FSTYPES ?= "cpio.gz"
 # The maximum size in Kbytes for the generated initramfs image size.
 # Usually, it should be less than 1/2 of ram size, or you may fail to
 # boot it.
-INITRAMFS_MAXSIZE ??= "131072"
+INITRAMFS_MAXSIZE ??= "196608"
 
 DEFAULT_TASK_PROVIDER ?= "packagegroup-base"
 MACHINE_TASK_PROVIDER ?= "${DEFAULT_TASK_PROVIDER}"
diff --git a/sbsa_setup.sh b/sbsa_setup.sh
new file mode 100755
index 0000000000..e1899d4265
--- /dev/null
+++ b/sbsa_setup.sh
@@ -0,0 +1,40 @@
+#!/bin/bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+#create tmp directory
+TMPDIR=$PWD/tmp
+LUVDIR=$PWD
+rm -rf $TMPDIR
+mkdir $TMPDIR
+cd $TMPDIR
+#clone linux-acs repo
+git clone git://linux-arm.org/linux-acs.git
+cd linux-acs
+#copy .bb and source files to relevant places
+rm -rf $LUVDIR/meta-luv/recipes-core/sbsa-acs-drv
+mv -f sbsa-acs-drv $LUVDIR/meta-luv/recipes-core/
+
+cd $TMPDIR
+git clone https://github.com/ARM-software/sbsa-acs.git
+cd sbsa-acs
+mv -f val $LUVDIR/meta-luv/recipes-core/sbsa-acs-drv/files/
+mv -f test_pool $LUVDIR/meta-luv/recipes-core/sbsa-acs-drv/files/
+
+rm -rf $LUVDIR/meta-luv/recipes-utils/sbsa-acs-app
+mkdir -p $LUVDIR/meta-luv/recipes-utils/sbsa-acs-app
+mv -f linux_app/* $LUVDIR/meta-luv/recipes-utils/sbsa-acs-app/
+
+cd $TMPDIR/..
+rm -rf $TMPDIR
diff --git a/sdei_setup.sh b/sdei_setup.sh
new file mode 100755
index 0000000000..102bb6f5f6
--- /dev/null
+++ b/sdei_setup.sh
@@ -0,0 +1,41 @@
+
+#!/bin/bash
+# Copyright (c) 2017, ARM Limited or its affiliates. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+#create tmp directory
+TMPDIR=$PWD/tmp
+LUVDIR=$PWD
+rm -rf $TMPDIR
+mkdir $TMPDIR
+cd $TMPDIR
+#clone linux-acs repo
+git clone git://linux-arm.org/linux-acs.git
+cd linux-acs
+#copy .bb and source files to relevant places
+rm -rf $LUVDIR/meta-luv/recipes-core/sdei-acs-drv
+mv -f sdei-acs-drv $LUVDIR/meta-luv/recipes-core/
+mv -f kernel/src/0001-Enterprise-acs-linux-v4.13.patch $LUVDIR/meta-luv/recipes-kernel/linux/linux-yocto-efi-test/
+
+cd $TMPDIR
+cd ../sdei
+cp -f val $LUVDIR/meta-luv/recipes-core/sdei-acs-drv/files/
+cp -f test_pool $LUVDIR/meta-luv/recipes-core/sdei-acs-drv/files/
+
+rm -rf $LUVDIR/meta-luv/recipes-utils/sdei-acs-app
+mkdir -p $LUVDIR/meta-luv/recipes-utils/sdei-acs-app
+cp -f linux_app/* $LUVDIR/meta-luv/recipes-utils/sdei-acs-app
+
+cd $TMPDIR/..
+rm -rf $TMPDIR
-- 
2.14.1

