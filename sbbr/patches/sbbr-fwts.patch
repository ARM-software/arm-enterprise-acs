From ccd989a73b7f19ebd3df9fae51e2bd5e9fd41055 Mon Sep 17 00:00:00 2001
From: Sakar Arora <Sakar.Arora@arm.com>
Date: Mon, 23 Apr 2018 18:53:41 +0530
Subject: [PATCH] sbbr fwts Added logs for dmicheck test case 2 where it skips
 due to SBBR

Signed-off-by: edhcha01 <edhaya.chandran@arm.com>
---
 src/Makefile.am                  |   2 +
 src/acpi/acpiinfo/acpiinfo.c     |  18 +++-
 src/acpi/devices/ged/ged.c       | 156 +++++++++++++++++++++++++++
 src/acpi/devices/pcie/rc.c       | 180 +++++++++++++++++++++++++++++++
 src/acpi/hest/hest.c             |  36 ++++++-
 src/acpi/method/method.c         |  60 +++++++++--
 src/dmi/dmicheck/dmicheck.c      |  69 +++++++++---
 src/sbbr/acpitables/acpitables.c |   9 +-
 8 files changed, 499 insertions(+), 31 deletions(-)
 create mode 100644 src/acpi/devices/ged/ged.c
 create mode 100644 src/acpi/devices/pcie/rc.c

diff --git a/src/Makefile.am b/src/Makefile.am
index 4daa9e8f..5d5246fa 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -71,6 +71,8 @@ fwts_SOURCES = main.c 				\
 	acpi/devices/battery/battery.c		\
 	acpi/devices/battery/smart_battery.c	\
 	acpi/devices/ec/ec.c			\
+	acpi/devices/ged/ged.c      \
+	acpi/devices/pcie/rc.c      \
 	acpi/devices/buttons/power_button.c	\
 	acpi/devices/buttons/sleep_button.c	\
 	acpi/devices/lid/lid.c			\
diff --git a/src/acpi/acpiinfo/acpiinfo.c b/src/acpi/acpiinfo/acpiinfo.c
index 50818503..ecfd95ca 100644
--- a/src/acpi/acpiinfo/acpiinfo.c
+++ b/src/acpi/acpiinfo/acpiinfo.c
@@ -25,6 +25,8 @@
 #include <unistd.h>
 #include <string.h>
 
+#define ACPI_VERSION_SBBR_COMPLIANT(maj, min) ((maj * 10 + min) >= 62)
+
 static int acpiinfo_compiled_by(fwts_framework *fw, char *name, int instance)
 {
 	char *compiler;
@@ -66,6 +68,9 @@ static int acpiinfo_test1(fwts_framework *fw)
 {
 	char *str;
 
+	if (fw->flags & FWTS_FLAG_TEST_SBBR)
+		return FWTS_OK;
+
 	if (((str = fwts_get("/sys/module/acpi/parameters/acpica_version")) == NULL) &&
 	    ((str = fwts_get("/proc/acpi/info")) == NULL))
                 fwts_log_info(fw,
@@ -119,6 +124,14 @@ static int acpiinfo_test2(fwts_framework *fw)
 	if (major >= 5 && fadt->header.length >= 268)
 		minor = fadt->minor_version;
 
+    if (fw->flags == FWTS_FLAG_TEST_SBBR) {
+		if (!ACPI_VERSION_SBBR_COMPLIANT(major, minor)) {
+			fwts_failed(fw, LOG_LEVEL_HIGH, "SbbrAcpiVersionTest",
+			"ACPI Version(%d.%d) not compliant with SBBR",
+			major, minor);
+		}
+    }
+
 	fwts_log_info(fw,
 		"FACP ACPI Version: %d.%d\n", major, minor);
 
@@ -131,6 +144,9 @@ static int acpiinfo_test3(fwts_framework *fw)
 {
 	int i;
 
+	if (fw->flags & FWTS_FLAG_TEST_SBBR)
+		return FWTS_OK;
+
 	fwts_log_info(fw,
 		"Determine the compiler used to generate the ACPI AML in the DSDT and SSDT.");
 
@@ -159,6 +175,6 @@ static fwts_framework_ops acpiinfo_ops = {
 	.minor_tests = acpiinfo_tests
 };
 
-FWTS_REGISTER("acpiinfo", &acpiinfo_ops, FWTS_TEST_EARLY, FWTS_FLAG_BATCH | FWTS_FLAG_TEST_ACPI)
+FWTS_REGISTER("acpiinfo", &acpiinfo_ops, FWTS_TEST_EARLY, FWTS_FLAG_BATCH | FWTS_FLAG_TEST_ACPI | FWTS_FLAG_TEST_SBBR)
 
 #endif
diff --git a/src/acpi/devices/ged/ged.c b/src/acpi/devices/ged/ged.c
new file mode 100644
index 00000000..316f15e7
--- /dev/null
+++ b/src/acpi/devices/ged/ged.c
@@ -0,0 +1,156 @@
+/*
+ * Copyright (C) 2018 Arm Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+#include "fwts.h"
+
+#if defined(FWTS_HAS_ACPI)
+
+#include "fwts_acpi_object_eval.h"
+#include <stdlib.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <inttypes.h>
+#include <string.h>
+
+#define FWTS_ACPI_GED_HID "ACPI0013"
+
+static ACPI_HANDLE device;
+
+static ACPI_STATUS get_device_handle(ACPI_HANDLE handle, uint32_t level,
+					  void *context, void **ret_val)
+{
+	FWTS_UNUSED(level);
+	FWTS_UNUSED(context);
+	FWTS_UNUSED(ret_val);
+
+	device = handle;
+	return AE_CTRL_TERMINATE;
+}
+
+static int acpi_ged_init(fwts_framework *fw)
+{
+	ACPI_STATUS status;
+
+	if (fwts_acpica_init(fw) != FWTS_OK)
+		return FWTS_ERROR;
+
+	status = AcpiGetDevices(FWTS_ACPI_GED_HID, get_device_handle, NULL, NULL);
+	if (ACPI_FAILURE(status)) {
+		fwts_log_error(fw, "Cannot find the ACPI device");
+		return FWTS_ERROR;
+	}
+
+	if (!device) {
+        fwts_warning(fw, "ACPI Generic Event Device (GED) not found. ACPI events must be "
+                        "provided using GED or _AEI method of GPIO device.");
+		fwts_acpica_deinit();
+		return FWTS_SKIP;
+	} else {
+		ACPI_BUFFER buffer;
+		char full_name[128];
+
+		buffer.Length = sizeof(full_name);
+		buffer.Pointer = full_name;
+
+		status = AcpiGetName(device, ACPI_FULL_PATHNAME, &buffer);
+		if (ACPI_SUCCESS(status)) {
+			fwts_log_info_verbatim(fw, "ACPI GED Device: %s", full_name);
+			fwts_log_nl(fw);
+		}
+	}
+
+	return FWTS_OK;
+}
+
+static void method_test_CRS_return(
+	fwts_framework *fw,
+	char *name,
+	ACPI_BUFFER *buf,
+	ACPI_OBJECT *obj,
+	void *private)
+{
+	uint8_t *data;
+	bool passed = true;
+	const char *tag = "Unknown";
+	char *objname = (char*)private;
+	char tmp[128];
+
+	FWTS_UNUSED(private);
+
+	if (fwts_method_check_type(fw, name, buf, ACPI_TYPE_BUFFER) != FWTS_OK)
+		return;
+	if (obj->Buffer.Pointer == NULL) {
+		snprintf(tmp, sizeof(tmp), "Method%sNullBuffer", objname);
+		fwts_failed(fw, LOG_LEVEL_CRITICAL, tmp,
+			"%s returned a NULL buffer pointer.", name);
+		return;
+	}
+	if (obj->Buffer.Length < 1) {
+		snprintf(tmp, sizeof(tmp), "Method%sBufferTooSmall", objname);
+		fwts_failed(fw, LOG_LEVEL_CRITICAL, tmp,
+			"%s should return a buffer of at least one byte in length.", name);
+		return;
+	}
+
+	data = (uint8_t*)obj->Buffer.Pointer;
+
+	if (data[0] & 128)
+		fwts_method_test_CRS_large_resource_items(fw, name, objname, data, obj->Buffer.Length, &passed, &tag);
+	else
+		fwts_method_test_CRS_small_resource_items(fw, name, objname, data, obj->Buffer.Length, &passed, &tag);
+
+	if (passed)
+		fwts_passed(fw, "%s (%s) looks sane.", name, tag);
+}
+
+static int method_test_CRS(fwts_framework *fw)
+{
+	return fwts_evaluate_method(fw, METHOD_MANDATORY, &device,
+		"_CRS", NULL, 0, method_test_CRS_return, NULL);
+}
+
+static int method_test_EVT(fwts_framework *fw)
+{
+	return fwts_evaluate_method(fw, METHOD_MANDATORY, &device,
+		"_EVT", NULL, 0, fwts_method_test_NULL_return, NULL);
+}
+
+static fwts_framework_minor_test acpi_ged_tests[] = {
+	{ method_test_CRS, "Test _CRS (Current Resource Settings)." },
+    { method_test_EVT, "Test _EVT (Event)."},
+	{ NULL, NULL }
+};
+
+static int acpi_ged_deinit(fwts_framework *fw)
+{
+	FWTS_UNUSED(fw);
+	fwts_acpica_deinit();
+
+	return FWTS_OK;
+}
+
+static fwts_framework_ops acpi_ged_ops = {
+	.description = "ACPI Generic Event Device test",
+	.init        = acpi_ged_init,
+	.deinit      = acpi_ged_deinit,
+	.minor_tests = acpi_ged_tests
+};
+
+FWTS_REGISTER("acpi_ged", &acpi_ged_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_TEST_SBBR)
+
+#endif
diff --git a/src/acpi/devices/pcie/rc.c b/src/acpi/devices/pcie/rc.c
new file mode 100644
index 00000000..fc04a6b4
--- /dev/null
+++ b/src/acpi/devices/pcie/rc.c
@@ -0,0 +1,180 @@
+/*
+ * Copyright (C) 2018 Arm Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+#include "fwts.h"
+
+#if defined(FWTS_HAS_ACPI)
+
+#include "fwts_acpi_object_eval.h"
+#include <stdlib.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <inttypes.h>
+#include <string.h>
+
+#define FWTS_ACPI_PCIE_RC_HID "PNP0A08"
+
+#define RESOURCE_TYPE_MEMORY_RANGE 0
+#define TRANSLATION_TYPE_MASK (1 << 5)
+
+static ACPI_HANDLE device;
+
+static ACPI_STATUS get_device_handle(ACPI_HANDLE handle, uint32_t level,
+					  void *context, void **ret_val)
+{
+	FWTS_UNUSED(level);
+	FWTS_UNUSED(context);
+	FWTS_UNUSED(ret_val);
+
+	device = handle;
+	return AE_CTRL_TERMINATE;
+}
+
+static void test_CRS_large_resource_items(
+	fwts_framework *fw,
+	const char *name,
+	const char *objname,
+	const uint8_t *data,
+	const uint64_t length,
+	bool *passed,
+	const char **tag)
+{
+	uint8_t tag_item = data[0] & 0x7f;
+	uint8_t resource_type = data[3], resource_flags = data[5];
+
+    FWTS_UNUSED(length);
+    FWTS_UNUSED(passed);
+    FWTS_UNUSED(tag);
+    FWTS_UNUSED(objname);
+
+	switch (tag_item) {
+		case 0x7:
+		case 0xa:
+		case 0xb:
+		if (resource_type == RESOURCE_TYPE_MEMORY_RANGE) {
+			if (!(resource_flags & TRANSLATION_TYPE_MASK))
+				fwts_warning(fw, "%s Translation type shoud be set to TypeTranslation", name);
+		}
+		break;
+		case 0x8:
+			fwts_failed(fw, LOG_LEVEL_HIGH, "BadAddressSpaceDesc", "WordIo descriptor found in %s. Only "
+						"DWordIo, QWordIo, ExtendedIo descriptors allowed. ", name);
+		break;
+	}
+	return;
+}
+
+static int acpi_rc_init(fwts_framework *fw)
+{
+	ACPI_STATUS status;
+
+	if (fwts_acpica_init(fw) != FWTS_OK)
+		return FWTS_ERROR;
+
+	status = AcpiGetDevices(FWTS_ACPI_PCIE_RC_HID, get_device_handle, NULL, NULL);
+	if (ACPI_FAILURE(status)) {
+		fwts_log_error(fw, "Cannot find the ACPI device");
+		return FWTS_ERROR;
+	}
+
+	if (!device) {
+		fwts_warning(fw, "PCIe Root Complex Device not found.");
+		fwts_acpica_deinit();
+		return FWTS_SKIP;
+	} else {
+		ACPI_BUFFER buffer;
+		char full_name[128];
+
+		buffer.Length = sizeof(full_name);
+		buffer.Pointer = full_name;
+
+		status = AcpiGetName(device, ACPI_FULL_PATHNAME, &buffer);
+		if (ACPI_SUCCESS(status)) {
+			fwts_log_info_verbatim(fw, "PCIe Root Complex Device: %s", full_name);
+			fwts_log_nl(fw);
+		}
+	}
+
+	return FWTS_OK;
+}
+
+static void method_test_CRS_return(
+	fwts_framework *fw,
+	char *name,
+	ACPI_BUFFER *buf,
+	ACPI_OBJECT *obj,
+	void *private)
+{
+	uint8_t *data;
+	bool passed = true;
+	const char *tag = "Unknown";
+	char *objname = (char*)private;
+	char tmp[128];
+
+	FWTS_UNUSED(private);
+
+	if (fwts_method_check_type(fw, name, buf, ACPI_TYPE_BUFFER) != FWTS_OK)
+		return;
+	if (obj->Buffer.Pointer == NULL) {
+		snprintf(tmp, sizeof(tmp), "Method%sNullBuffer", objname);
+		fwts_failed(fw, LOG_LEVEL_CRITICAL, tmp,
+			"%s returned a NULL buffer pointer.", name);
+		return;
+	}
+	if (obj->Buffer.Length < 1) {
+		snprintf(tmp, sizeof(tmp), "Method%sBufferTooSmall", objname);
+		fwts_failed(fw, LOG_LEVEL_CRITICAL, tmp,
+			"%s should return a buffer of at least one byte in length.", name);
+		return;
+	}
+
+	data = (uint8_t*)obj->Buffer.Pointer;
+
+	if (data[0] & 128)
+		test_CRS_large_resource_items(fw, name, objname, data, obj->Buffer.Length, &passed, &tag);
+}
+
+static int method_test_CRS(fwts_framework *fw)
+{
+	return fwts_evaluate_method(fw, METHOD_MANDATORY, &device,
+		"_CRS", NULL, 0, method_test_CRS_return, NULL);
+}
+
+static fwts_framework_minor_test acpi_rc_tests[] = {
+	{ method_test_CRS, "Test _CRS (Current Resource Settings)." },
+	{ NULL, NULL }
+};
+
+static int acpi_rc_deinit(fwts_framework *fw)
+{
+	FWTS_UNUSED(fw);
+	fwts_acpica_deinit();
+
+	return FWTS_OK;
+}
+
+static fwts_framework_ops acpi_rc_ops = {
+	.description = "ACPI PCIe Root Complex resources test",
+	.init        = acpi_rc_init,
+	.deinit      = acpi_rc_deinit,
+	.minor_tests = acpi_rc_tests
+};
+
+FWTS_REGISTER("acpi_rc", &acpi_rc_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_TEST_SBBR)
+
+#endif
diff --git a/src/acpi/hest/hest.c b/src/acpi/hest/hest.c
index 11131488..4fca574f 100644
--- a/src/acpi/hest/hest.c
+++ b/src/acpi/hest/hest.c
@@ -590,6 +590,16 @@ static void hest_check_generic_error_source(
 		return;
 	}
 
+	if (fw->flags & FWTS_FLAG_TEST_SBBR) {
+		if (source->notification.type == 0xb) /* Software Delegated Exception */
+			*passed = true;
+		else
+			*passed = false;
+		*length -= sizeof(fwts_acpi_table_hest_generic_hardware_error_source);
+		*data += sizeof(fwts_acpi_table_hest_generic_hardware_error_source);
+		return;
+	}
+
 	fwts_log_info_verbatim(fw, "HEST Generic Hardware Error Source");
 	fwts_log_info_verbatim(fw, "  Type:                     0x%2.2" PRIx8, source->type);
 	fwts_log_info_verbatim(fw, "  Source ID:                0x%4.4" PRIx16, source->source_id);
@@ -692,6 +702,16 @@ static void hest_check_generic_error_source_v2(
 		return;
 	}
 
+	if (fw->flags & FWTS_FLAG_TEST_SBBR) {
+		if (source->notification.type == 0xb) /* Software Delegated Exception */
+			*passed = true;
+		else
+			*passed = false;
+		*length -= sizeof(fwts_acpi_table_hest_generic_hardware_error_source_v2);
+		*data += sizeof(fwts_acpi_table_hest_generic_hardware_error_source_v2);
+		return;
+	}
+
 	fwts_log_info_verbatim(fw, "HEST Generic Hardware Error Source version 2");
 	fwts_log_info_verbatim(fw, "  Type:                     0x%2.2" PRIx8, source->type);
 	fwts_log_info_verbatim(fw, "  Source ID:                0x%4.4" PRIx16, source->source_id);
@@ -800,6 +820,7 @@ static int hest_test1(fwts_framework *fw)
 		 hest_type_01_count = 0,
 		 hest_type_02_count = 0,
 		 hest_type_11_count = 0;
+         static bool ghes_notification_type_sde = false;
 
 
 	if (table->length < sizeof(fwts_acpi_table_hest)) {
@@ -846,9 +867,13 @@ static int hest_test1(fwts_framework *fw)
 			break;
 		case 9:
 			hest_check_generic_error_source(fw, &length, &data, &passed);
+			if ((fw->flags & FWTS_FLAG_TEST_SBBR) && passed)
+				ghes_notification_type_sde = true;
 			break;
 		case 10:
 			hest_check_generic_error_source_v2(fw, &length, &data, &passed);
+			if ((fw->flags & FWTS_FLAG_TEST_SBBR) && passed)
+				ghes_notification_type_sde = true;
 			break;
 		case 11:
 			/* the structure of type 11 is the same as type 1 */
@@ -865,6 +890,15 @@ static int hest_test1(fwts_framework *fw)
 			break;
 		}
 	}
+
+	if (fw->flags & FWTS_FLAG_TEST_SBBR) {
+		if (!ghes_notification_type_sde)
+			fwts_warning(fw, "HestGhesNotificationType: "
+				"No SDE signal for error notification found. "
+                "An SDE or NMI equivalent signal must be provided.");
+		return FWTS_OK;
+	}
+
 	if (hest_type_00_count > 1) {
 		passed = false;
 		fwts_failed(fw, LOG_LEVEL_HIGH,
@@ -910,6 +944,6 @@ static fwts_framework_ops hest_ops = {
 	.minor_tests = hest_tests
 };
 
-FWTS_REGISTER("hest", &hest_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_TEST_ACPI)
+FWTS_REGISTER("hest", &hest_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_TEST_ACPI | FWTS_FLAG_TEST_SBBR)
 
 #endif
diff --git a/src/acpi/method/method.c b/src/acpi/method/method.c
index 48736af3..e4532bf1 100644
--- a/src/acpi/method/method.c
+++ b/src/acpi/method/method.c
@@ -1,4 +1,4 @@
-/*
+ /*
  * Copyright (C) 2010-2018 Canonical
  *
  * This program is free software; you can redistribute it and/or
@@ -259,6 +259,14 @@
 
 static bool fadt_mobile_platform;	/* True if a mobile platform */
 
+#define SBBR_LPI_WARNING "_LPI method not found. Where CPU idling low power states are provided, " \
+                         "the DSDT must provide _LPI objects."
+#define SBBR_HMA_WARNING "_HMA method not found. Recommended for NUMA systems to dynamically update HMAT."
+#define SBBR_SLI_WARNING "_SLI method not found. Recommended for NUMA systems to dynamically update SLIT."
+#define SBBR_AEI_WARNING "_AEI method not found. ACPI events must be provided using _AEI method of " \
+                         "GPIO device or Generic Event Device."
+
+
 #define method_test_integer(name, type)				\
 static int method_test ## name(fwts_framework *fw)		\
 { 								\
@@ -443,6 +451,9 @@ static int method_evaluate_method(fwts_framework *fw,
 					"Object %s did not exist.", name);
 			}
 
+			if ((fw->flags & FWTS_FLAG_TEST_SBBR) && private)
+				fwts_warning(fw, (const char*)private, 0);
+
 			/* Mobile specific tests on non-mobile platform? */
 			if ((test_type & METHOD_MOBILE) && (!fadt_mobile_platform)) {
 				fwts_skipped(fw,
@@ -456,7 +467,6 @@ static int method_evaluate_method(fwts_framework *fw,
 			}
 		}
 		return FWTS_NOT_EXIST;
-
 	}
 }
 
@@ -575,7 +585,7 @@ static int method_test_AEI(fwts_framework *fw)
 {
 	if (fw->flags & FWTS_FLAG_TEST_SBBR)
 		return method_evaluate_method(fw, METHOD_MANDATORY,
-			"_AEI", NULL, 0, method_test_AEI_return, NULL);
+			"_AEI", NULL, 0, method_test_AEI_return, SBBR_AEI_WARNING);
 	else
 		return method_evaluate_method(fw, METHOD_OPTIONAL,
 			"_AEI", NULL, 0, method_test_AEI_return, NULL);
@@ -1417,8 +1427,12 @@ static int method_test_HPP(fwts_framework *fw)
 
 static int method_test_PXM(fwts_framework *fw)
 {
-	return method_evaluate_method(fw, METHOD_OPTIONAL,
-		"_PXM", NULL, 0, fwts_method_test_integer_return, NULL);
+	if (fw->flags & FWTS_FLAG_TEST_SBBR)
+		return method_evaluate_method(fw, METHOD_OPTIONAL,
+			"_PXM", NULL, 0, fwts_method_test_integer_return, NULL);
+	else
+		return method_evaluate_method(fw, METHOD_OPTIONAL,
+			"_PXM", NULL, 0, fwts_method_test_integer_return, NULL);
 }
 
 /* Section 6.2.17 _CCA */
@@ -3144,8 +3158,9 @@ static void method_test_LPI_return(
 	if (fwts_method_check_type(fw, name, buf, ACPI_TYPE_PACKAGE) != FWTS_OK)
 		return;
 
-	if (fwts_method_package_count_min(fw, name, "_LPI", obj, 3) != FWTS_OK)
+	if (fwts_method_package_count_min(fw, name, "_LPI", obj, 3) != FWTS_OK) {
 		return;
+	}
 
 	/* first 3 elements are integers, and rests are packages */
 	for (i = 0; i < obj->Package.Count; i++) {
@@ -3245,8 +3260,12 @@ static void method_test_LPI_return(
 
 static int method_test_LPI(fwts_framework *fw)
 {
-	return method_evaluate_method(fw, METHOD_OPTIONAL,
-		"_LPI", NULL, 0, method_test_LPI_return, NULL);
+	if (fw->flags & FWTS_FLAG_TEST_SBBR)
+		return method_evaluate_method(fw, METHOD_OPTIONAL,
+			"_LPI", NULL, 0, method_test_LPI_return, SBBR_LPI_WARNING);
+	else
+		return method_evaluate_method(fw, METHOD_OPTIONAL,
+			"_LPI", NULL, 0, method_test_LPI_return, NULL);
 }
 
 static void method_test_RDI_return(
@@ -5880,6 +5899,7 @@ static int method_test_BQC(fwts_framework *fw)
 		"_BQC", NULL, 0, fwts_method_test_integer_return, NULL);
 }
 
+/*
 static void method_test_DDC_return(
 	fwts_framework *fw,
 	char *name,
@@ -5940,6 +5960,7 @@ static int method_test_DDC(fwts_framework *fw)
 	}
 	return FWTS_OK;
 }
+*/
 
 static int method_test_DCS(fwts_framework *fw)
 {
@@ -5991,6 +6012,24 @@ static int method_test_SRV(fwts_framework *fw)
 		"_SRV", NULL, 0, fwts_method_test_integer_return, NULL);
 }
 
+static int method_test_HMA(fwts_framework *fw)
+{
+	if (!(fw->flags & FWTS_FLAG_TEST_SBBR))
+		return FWTS_OK;
+
+	return method_evaluate_method(fw, METHOD_OPTIONAL,
+		"_HMA", NULL, 0, method_test_buffer_return, SBBR_HMA_WARNING);
+}
+
+static int method_test_SLI(fwts_framework *fw)
+{
+	if (!(fw->flags & FWTS_FLAG_TEST_SBBR))
+		return FWTS_OK;
+
+	return method_evaluate_method(fw, METHOD_OPTIONAL,
+		"_SLI", NULL, 0, method_test_buffer_return, SBBR_SLI_WARNING);
+}
+
 /*
  * Tests
  */
@@ -6044,9 +6083,10 @@ static fwts_framework_minor_test method_tests[] = {
 	{ method_test_PRS, "Test _PRS (Possible Resource Settings)." },
 	{ method_test_PRT, "Test _PRT (PCI Routing Table)." },
 	{ method_test_PXM, "Test _PXM (Proximity)." },
-	/* { method_test_SLI, "Test _SLI (System Locality Information)." }, */
+	{ method_test_SLI, "Test _SLI (System Locality Information)." },
 	/* { method_test_SRS, "Test _SRS (Set Resource Settings)." }, */
 	{ method_test_CCA, "Test _CCA (Cache Coherency Attribute)." },
+	{ method_test_HMA, "Test _HMA (Heterogeneous Memory Attributes)."},
 
 	/* Section 6.3 Device Insertion, Removal and Status Objects */
 
@@ -6294,7 +6334,7 @@ static fwts_framework_minor_test method_tests[] = {
 	{ method_test_BCM, "Test _BCM (Set Brightness Level)." },
 	{ method_test_BQC, "Test _BQC (Brightness Query Current Level)." },
 	{ method_test_DCS, "Test _DCS (Return the Status of Output Device)." },
-	{ method_test_DDC, "Test _DDC (Return the EDID for this Device)." },
+	/*{ method_test_DDC, "Test _DDC (Return the EDID for this Device)." },*/
 	{ method_test_DSS, "Test _DSS (Device Set State)." },
 	{ method_test_DGS, "Test _DGS (Query Graphics State)." },
 	{ method_test_DOD, "Test _DOD (Enumerate All Devices Attached to Display Adapter)." },
diff --git a/src/dmi/dmicheck/dmicheck.c b/src/dmi/dmicheck/dmicheck.c
index 8d3ca5ad..fd6b9834 100644
--- a/src/dmi/dmicheck/dmicheck.c
+++ b/src/dmi/dmicheck/dmicheck.c
@@ -56,6 +56,8 @@
 #define DMI_RESERVED_BIT_USED		"DMIReservedBitUsed"
 #define DMI_RESERVED_OFFSET_NONZERO	"DMIReservedOffsetNonZero"
 
+#define NET_HOST_IF_PROT_REDFISH	0x4
+
 #define GET_UINT16(x) (uint16_t)(*(const uint16_t *)(x))
 #define GET_UINT32(x) (uint32_t)(*(const uint32_t *)(x))
 #define GET_UINT64(x) (uint64_t)(*(const uint64_t *)(x))
@@ -301,26 +303,38 @@ static const fwts_dmi_used_by_kernel dmi_used_by_kernel_table[] = {
 	{ TYPE_EOD, 0xff },
 };
 
-static int dmi_load_file(const char* filename, void *buf, size_t size)
+static int dmi_load_file(const char* filename, void *buf, size_t *size)
 {
 	int fd;
-	ssize_t ret;
+	void *p;
+	ssize_t count = 0;
+	size_t sz;
 
-	(void)memset(buf, 0, size);
+	(void)memset(buf, 0, *size);
 
 	if ((fd = open(filename, O_RDONLY)) < 0)
 		return FWTS_ERROR;
-	ret = read(fd, buf, size);
+
+	for (p = buf, sz = 0; sz < *size; p += count, sz += count) {
+		count = read(fd, p, *size - sz);
+		if (count == -1) {
+			(void)close(fd);
+			return FWTS_ERROR;
+		}
+		if (count == 0)
+			break;
+	}
+
 	(void)close(fd);
-	if (ret != (ssize_t)size)
-		return FWTS_ERROR;
+
+	*size = sz;
 	return FWTS_OK;
 }
 
 static void* dmi_table_smbios(fwts_framework *fw, fwts_smbios_entry *entry)
 {
 	off_t addr = (off_t)entry->struct_table_address;
-	size_t length = (size_t)entry->struct_table_length;
+	size_t length = (size_t)entry->struct_table_length, ret_len;
 	void *table;
 	void *mem;
 	char anchor[8];
@@ -347,12 +361,17 @@ static void* dmi_table_smbios(fwts_framework *fw, fwts_smbios_entry *entry)
 		return table;
 	}
 
-	if (dmi_load_file("/sys/firmware/dmi/tables/smbios_entry_point", anchor, 4) == FWTS_OK
+	ret_len = 4;
+
+	if (dmi_load_file("/sys/firmware/dmi/tables/smbios_entry_point", anchor, &ret_len) == FWTS_OK
 			&& strncmp(anchor, "_SM_", 4) == 0) {
 		table = malloc(length);
 		if (!table)
 			return NULL;
-		if (dmi_load_file("/sys/firmware/dmi/tables/DMI", table, length) == FWTS_OK) {
+
+		ret_len = length;
+		if (dmi_load_file("/sys/firmware/dmi/tables/DMI", table, &ret_len) == FWTS_OK
+			&& ret_len == length) {
 			fwts_log_info(fw, "SMBIOS table loaded from /sys/firmware/dmi/tables/DMI\n");
 			return table;
 		}
@@ -367,7 +386,7 @@ static void* dmi_table_smbios(fwts_framework *fw, fwts_smbios_entry *entry)
 static void* dmi_table_smbios30(fwts_framework *fw, fwts_smbios30_entry *entry)
 {
 	off_t addr = (off_t)entry->struct_table_address;
-	size_t length = (size_t)entry->struct_table_max_size;
+	size_t length = (size_t)entry->struct_table_max_size, ret_len;
 	void *table;
 	void *mem;
 	char anchor[8];
@@ -394,20 +413,24 @@ static void* dmi_table_smbios30(fwts_framework *fw, fwts_smbios30_entry *entry)
 		return table;
 	}
 
-	if (dmi_load_file("/sys/firmware/dmi/tables/smbios_entry_point", anchor, 5) == FWTS_OK
+	ret_len = 5;
+
+	if (dmi_load_file("/sys/firmware/dmi/tables/smbios_entry_point", anchor, &ret_len) == FWTS_OK
 			&& strncmp(anchor, "_SM3_", 5) == 0) {
 		table = malloc(length);
 		if (!table)
 			return NULL;
-		if (dmi_load_file("/sys/firmware/dmi/tables/DMI", table, length) == FWTS_OK) {
+
+		ret_len = length;
+		if (dmi_load_file("/sys/firmware/dmi/tables/DMI", table, &ret_len) == FWTS_OK) {
 			fwts_log_info(fw, "SMBIOS30 table loaded from /sys/firmware/dmi/tables/DMI\n");
 			return table;
 		}
 		free(table);
 	}
 
-	fwts_log_error(fw, "Cannot mmap SMBIOS 3.0 table from %16.16" PRIx64 "..%16.16" PRIx64 ".",
-			entry->struct_table_address, entry->struct_table_address + entry->struct_table_max_size);
+	fwts_log_error(fw, "Cannot mmap SMBIOS 3.0 table from %16.16" PRIx64 "..%16.16" PRIx64 ". actual sz=%lu. max sz=%lu",
+			entry->struct_table_address, entry->struct_table_address + entry->struct_table_max_size, ret_len, length);
 	return NULL;
 }
 
@@ -1816,6 +1839,19 @@ static void dmicheck_entry(fwts_framework *fw,
 					"while accessing entry '%s' @ "
 					"0x%8.8" PRIx32 ", field '%s', offset 0x%2.2x",
 					data[0x4], table, addr, "Reference Designation", 0x4);
+
+			if (fw->flags & FWTS_FLAG_TEST_SBBR && data[0x4] == 0x40) {
+				count = data[0x5] + 0x6;
+				val = data[count++];
+				for (i = 0; i < val; i++) {
+					if (data[count++] == NET_HOST_IF_PROT_REDFISH)
+						break;
+					count = count + data[count] + 1;
+				}
+				if (i == val)
+					fwts_warning(fw, "Redfish protocol not found for network host interface. This is "
+									 "required for platforms supporting Redfish host interface.");
+			}
 			break;
 
 		case 43: /* 7.44 */
@@ -1961,7 +1997,7 @@ static sbbr_test_entry sbbr_test[] = {
 	{ "Memory Device", 17, 1, 0, 0 },
 	{ "Memory Array Mapped Address", 19, 1, 0, 0 },
 	{ "System Boot Information", 32, 1, 0, 0 },
-	{ "IPMI Device Information", 38, 0, "Required for platforms with IPMI BMC Interface.", 0 },
+	{ "IPMI Device Information", 38, 0, "Required for platforms with IPMIv1.0 BMC Interface.", 0 },
 	{ "Onboard Devices Extended Information", 41, 0, RECOMMENDED_STRUCTURE_DEFAULT_MSG, 0 },
 	{ 0, 0, 0, 0, 0 }
 };
@@ -2054,7 +2090,10 @@ static int dmicheck_test2(fwts_framework *fw)
 	uint8_t  *table;
 
 	if (fw->flags & FWTS_FLAG_TEST_SBBR)
+	{
+		fwts_skipped(fw, "This test is not required for SBBR Compliance, skip the test.");	
 		return FWTS_SKIP;
+	}
 
 	if (!smbios_found) {
 		fwts_skipped(fw, "Cannot find SMBIOS or DMI table entry, skip the test.");
diff --git a/src/sbbr/acpitables/acpitables.c b/src/sbbr/acpitables/acpitables.c
index d40c164d..59b536d1 100644
--- a/src/sbbr/acpitables/acpitables.c
+++ b/src/sbbr/acpitables/acpitables.c
@@ -199,14 +199,15 @@ static const char *recommended_acpi_tables[] = {
 	"EINJ",
 	"ERST",
 	"HEST",
-	"RASF",
 	"SPMI",
 	"SLIT",
 	"SRAT",
-	"CSRT",
-	"ECDT",
-	"MPST",
 	"PCCT",
+	"SDEI",
+	"PPTT",
+	"PDTT",
+	"NFIT",
+	"HMAT",
 	NULL
 };
 
-- 
2.17.1

