diff --git a/uefi-sct/SctPkg/CommonGenFramework.sh b/uefi-sct/SctPkg/CommonGenFramework.sh
index 779a6a44..a30be829 100755
--- a/uefi-sct/SctPkg/CommonGenFramework.sh
+++ b/uefi-sct/SctPkg/CommonGenFramework.sh
@@ -338,4 +338,193 @@ then
   CopyDependency Ebc
   CopyDependency PxeBaseCode
 fi
+# *********************************************
+# For SBBR v1.0 SCT
+# *********************************************
+
+if [ $1 = "sbbr_sct" ]
+then
+    # *********************************************
+    # Copy the SBBR v1.2 Test Cases
+    # *********************************************
+    cp ../../../SctPkg/UEFI/SBBR.seq                 $Framework/Sequence/ > NUL
+
+    mkdir -p $Framework/SCRT
+    cp $ProcessorType/SCRTDRIVER.efi                           $Framework/SCRT  > NUL
+    cp $ProcessorType/SCRTAPP.efi                              $Framework/SCRT  > NUL
+    cp ../../../SctPkg/Config/Data/SCRT.conf                   $Framework/SCRT  > NUL
+
+    # *********************************************
+    # Copy your test cases here
+    # *********************************************
+  # Only include ExeModeBBTest.efi if the file exists
+  if [ -e $ProcessorType/ExeModeBBTest.efi ]; then
+    cp $ProcessorType/ExeModeBBTest.efi                      $Framework/Test/ > NUL
+  fi
+
+    # Boot Services Tests - SBBR v1.0 Appendix A
+    cp $ProcessorType/EventTimerTaskPriorityServicesBBTest.efi $Framework/Test/ > NUL
+    cp $ProcessorType/MemoryAllocationServicesBBTest.efi       $Framework/Test/ > NUL
+    cp $ProcessorType/ProtocolHandlerServicesBBTest.efi        $Framework/Test/ > NUL
+    cp $ProcessorType/ImageServicesBBTest.efi                  $Framework/Test/ > NUL
+    cp $ProcessorType/MiscBootServicesBBTest.efi               $Framework/Test/ > NUL
+    cp $ProcessorType/BisBBTest.efi                            $Framework/Test/ > NUL
+    cp $ProcessorType/BlockIoBBTest.efi                        $Framework/Test/ > NUL
+    cp $ProcessorType/BlockIo2BBTest.efi                       $Framework/Test/ > NUL
+    cp $ProcessorType/BusSpecificDriverOverrideBBTest.efi      $Framework/Test/ > NUL
+#   cp $ProcessorType/ComponentNameBBTest.efi                  $Framework/Test/ > NUL
+    cp $ProcessorType/DebugPortBBTest.efi                      $Framework/Test/ > NUL
+    cp $ProcessorType/DebugSupportBBTest.efi                   $Framework/Test/ > NUL
+    cp $ProcessorType/DecompressBBTest.efi                     $Framework/Test/ > NUL
+#Note: Device IO BB is deprecated in SCT 2.3
+#   cp $ProcessorType/DeviceIoBBTest.efi                       $Framework/Test/ > NUL
+    cp $ProcessorType/DevicePathBBTest.efi                     $Framework/Test/ > NUL
+    cp $ProcessorType/DevicePathUtilitiesBBTest.efi            $Framework/Test/ > NUL
+    cp $ProcessorType/DevicePathToTextBBTest.efi               $Framework/Test/ > NUL
+    cp $ProcessorType/DevicePathFromTextBBTest.efi             $Framework/Test/ > NUL
+    cp $ProcessorType/DiskIoBBTest.efi                         $Framework/Test/ > NUL
+#   cp $ProcessorType/DriverDiagnosticsBBTest.efi              $Framework/Test/ > NUL
+#   cp $ProcessorType/DriverConfigurationBBTest.efi            $Framework/Test/ > NUL
+    cp $ProcessorType/EbcBBTest.efi                            $Framework/Test/ > NUL
+    cp $ProcessorType/LoadedImageBBTest.efi                    $Framework/Test/ > NUL
+    cp $ProcessorType/LoadFileBBTest.efi                       $Framework/Test/ > NUL
+    cp $ProcessorType/PciIoBBTest.efi                          $Framework/Test/ > NUL
+    cp $ProcessorType/PciRootBridgeIoBBTest.efi                $Framework/Test/ > NUL
+    cp $ProcessorType/PlatformDriverOverrideBBTest.efi         $Framework/Test/ > NUL
+    cp $ProcessorType/PxeBaseCodeBBTest.efi                    $Framework/Test/ > NUL
+#Note: SCSI Passthru Protocol BB is deprecated in SCT 2.3
+#   cp $ProcessorType/ScsiPassThruBBTest.efi                   $Framework/Test/ > NUL
+    cp $ProcessorType/ScsiIoBBTest.efi                         $Framework/Test/ > NUL
+    cp $ProcessorType/ExtScsiPassThruBBTest.efi                $Framework/Test/ > NUL
+    cp $ProcessorType/AtaPassThruBBTest.efi                    $Framework/Test/ > NUL
+    cp $ProcessorType/iScsiInitiatorNameBBTest.efi             $Framework/Test/ > NUL
+    cp $ProcessorType/SerialIoBBTest.efi                       $Framework/Test/ > NUL
+    cp $ProcessorType/SimpleFileSystemBBTest.efi               $Framework/Test/ > NUL
+    cp $ProcessorType/SimpleNetworkBBTest.efi                  $Framework/Test/ > NUL
+    cp $ProcessorType/SimplePointerBBTest.efi                  $Framework/Test/ > NUL
+    cp $ProcessorType/SimpleTextInBBTest.efi                   $Framework/Test/ > NUL
+    cp $ProcessorType/SimpleTextOutBBTest.efi                  $Framework/Test/ > NUL
+#Note: UGA I/O + UGA Draw Protocol BB is deprecated in SCT 2.3
+#   cp $ProcessorType/UgaDrawBbTest.efi                        $Framework/Test/ > NUL
+    cp $ProcessorType/GraphicsOutputBBTest.efi                 $Framework/Test/ > NUL
+    cp $ProcessorType/UnicodeCollation2BBTest.efi              $Framework/Test/ > NUL
+#Note: USB Host Controller Protocol BB is deprecated in SCT 2.3
+#   cp $ProcessorType/UsbHcTest.efi                            $Framework/Test/ > NUL
+    cp $ProcessorType/UsbIoTest.efi                            $Framework/Test/ > NUL
+    cp $ProcessorType/Usb2HcTest.efi                           $Framework/Test/ > NUL
+#    cp $ProcessorType/AuthenticationBBTest.efi                 $Framework/Test/ > NUL
+#   cp $ProcessorType/HashBBTest.efi                           $Framework/Test/ > NUL
+    cp $ProcessorType/TapeBBTest.efi                           $Framework/Test/ > NUL
+    cp $ProcessorType/AcpiTableProtocolBBTest.efi              $Framework/Test/ > NUL
+    cp $ProcessorType/SimpleTextInputExBBTest.efi              $Framework/Test/ > NUL
+    cp $ProcessorType/ComponentName2BBTest.efi                 $Framework/Test/ > NUL
+    cp $ProcessorType/DriverDiagnostics2BBTest.efi             $Framework/Test/ > NUL
+
+    cp $ProcessorType/HIIDatabaseBBTest.efi                    $Framework/Test/ > NUL
+    cp $ProcessorType/HIIStringBBTest.efi                      $Framework/Test/ > NUL
+    cp $ProcessorType/HIIFontBBTest.efi                        $Framework/Test/ > NUL
+    cp $ProcessorType/HIIFontExBBTest.efi                      $Framework/Test/ > NUL
+    cp $ProcessorType/HIIImageBBTest.efi                       $Framework/Test/ > NUL
+    cp $ProcessorType/HIIImageExBBTest.efi                     $Framework/Test/ > NUL
+
+    cp $ProcessorType/AbsolutePointerBBTest.efi                $Framework/Test/ > NUL
+#   cp $ProcessorType/DriverSupportedEfiVersionBBTest.efi      $Framework/Test/ > NUL
+    cp $ProcessorType/PlatformToDriverConfigurationBBTest.efi  $Framework/Test/ > NUL
+    cp $ProcessorType/HIIConfigAccessBBTest.efi                $Framework/Test/ > NUL
+    cp $ProcessorType/HIIConfigRoutingBBTest.efi               $Framework/Test/ > NUL
+    cp $ProcessorType/VlanConfigBBTest.efi                     $Framework/Test/ > NUL
+    cp $ProcessorType/IPsecConfigBBTest.efi                    $Framework/Test/ > NUL
+    cp $ProcessorType/IPsec2BBTest.efi                         $Framework/Test/ > NUL
+    cp $ProcessorType/StorageSecurityCommandBBTest.efi         $Framework/Test/ > NUL
+
+    cp $ProcessorType/FirmwareManagementBBTest.efi             $Framework/Test/ > NUL
+
+    cp $ProcessorType/AdapterInfoBBTest.efi                    $Framework/Test/ > NUL
+    cp $ProcessorType/DiskIo2BBTest.efi                        $Framework/Test/ > NUL
+    cp $ProcessorType/TimeStampBBTest.efi                      $Framework/Test/ > NUL
+    cp $ProcessorType/RandomNumberBBTest.efi                   $Framework/Test/ > NUL
+    cp $ProcessorType/Hash2BBTest.efi                          $Framework/Test/ > NUL
+    cp $ProcessorType/Pkcs7BBTest.efi                          $Framework/Test/ > NUL
+    cp $ProcessorType/ConfigKeywordHandlerBBTest.efi           $Framework/Test/ > NUL
+    cp $ProcessorType/RegularExpressionBBTest.efi              $Framework/Test/ > NUL
+
+    cp $ProcessorType/RamDiskProtocolBBTest.efi                $Framework/Test/ > NUL
+    cp $ProcessorType/NVMEPassThruBBTest.efi                   $Framework/Test/ > NUL
+    cp $ProcessorType/EraseBlockBBTest.efi                     $Framework/Test/ > NUL
+    cp $ProcessorType/SDMMCPassThruBBTest.efi                  $Framework/Test/ > NUL
+    cp $ProcessorType/PartitionInfoBBTest.efi                  $Framework/Test/ > NUL
+    cp $ProcessorType/UFSDeviceConfigBBTest.efi                $Framework/Test/ > NUL
+    cp $ProcessorType/ResetNotificationBBTest.efi              $Framework/Test/ > NUL
+
+    # *********************************************
+    # SBBR test cases
+    # *********************************************
+
+    # Tests SBBR sections 3.3.1, 3.3.2, 3.3.3, and 3.3.4
+    cp $ProcessorType/SysEnvConfigBBTest.efi                   $Framework/Test/ > NUL
+
+    # UEFI Boot Services - SBBR v1.0 3.4
+    cp $ProcessorType/SbbrBootServicesBBTest.efi               $Framework/Test/ > NUL
+
+    # Check if EFI Specification Version is 2.5 or greater
+    cp $ProcessorType/EfiSpecVerLvlBBTest.efi                  $Framework/Test/ > NUL
+
+    # SMBIOS Requirements on UEFI - SBBR v1.0 5.1.1
+    cp $ProcessorType/SbbrSmbiosBBTest.efi                     $Framework/Test/ > NUL
+
+    # Runtime Services Tests - SBBR v1.0 Appendix B
+    cp $ProcessorType/VariableServicesBBTest.efi               $Framework/Test/ > NUL
+    cp $ProcessorType/TimeServicesBBTest.efi                   $Framework/Test/ > NUL
+    cp $ProcessorType/MiscRuntimeServicesBBTest.efi            $Framework/Test/ > NUL
+    cp $ProcessorType/SBBRRuntimeServicesBBTest.efi            $Framework/Test/ > NUL
+
+    # Tests SBBR Appendix C
+    cp $ProcessorType/RequiredUefiProtocolsBBTest.efi          $Framework/Test/ > NUL
+    cp $ProcessorType/EfiCompliantBBTest.efi                   $Framework/Test/ > NUL
+
+    # *********************************************
+    # Copy ENTS binary
+    # *********************************************
+
+    cp $ProcessorType/SerialMonitor.efi                $Framework/Ents/Support/ > NUL
+    cp $ProcessorType/ManagedNetworkMonitor.efi        $Framework/Ents/Support/ > NUL
+    cp $ProcessorType/IP4NetworkMonitor.efi            $Framework/Ents/Support/ > NUL
+    cp $ProcessorType/Eftp.efi                         $Framework/Ents/Support/ > NUL
+
+    cp $ProcessorType/BootService_ENTSTest.efi         $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/RuntimeService_ENTSTest.efi      $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/GenericService_ENTSTest.efi      $Framework/Ents/Test/    > NUL
+
+    cp $ProcessorType/SimpleNetwork_ENTSTest.efi       $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/PXEBaseCode_ENTSTest.efi         $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Mnp*_ENTSTest.efi                $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Arp*_ENTSTest.efi                $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Ip4*_ENTSTest.efi                $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Ip6*_ENTSTest.efi                $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Udp4*_ENTSTest.efi               $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Udp6*_ENTSTest.efi               $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Dhcp4*_ENTSTest.efi              $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Dhcp6*_ENTSTest.efi              $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Mtftp4*_ENTSTest.efi             $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Mtftp6*_ENTSTest.efi             $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Tcp4*_ENTSTest.efi               $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Tcp6*_ENTSTest.efi               $Framework/Ents/Test/    > NUL
+    cp $ProcessorType/Http*_ENTSTest.efi               $Framework/Ents/Test/    > NUL
 
+    # *********************************************
+    # Copy the test dependency files
+    # *********************************************
+
+    CopyDependency EfiCompliant
+    cp ../../../SctPkg/UEFI/EfiCompliant_SBBR.ini    $Framework/Dependency/EfiCompliantBBTest/EfiCompliant.ini  > NUL
+    CopyDependency ProtocolHandlerServices
+    CopyDependency ImageServices
+    CopyDependency Decompress
+    CopyDependency DeviceIo
+    CopyDependency Ebc
+    CopyDependency LoadedImage
+    CopyDependency PciIo
+    CopyDependency PciRootBridgeIo
+    CopyDependency PxeBaseCode
+    CopyDependency ConfigKeywordHandler
+fi
diff --git a/uefi-sct/SctPkg/Config/Data/Category.ini b/uefi-sct/SctPkg/Config/Data/Category.ini
index af27e362..0d17f82a 100644
--- a/uefi-sct/SctPkg/Config/Data/Category.ini
+++ b/uefi-sct/SctPkg/Config/Data/Category.ini
@@ -88,6 +88,34 @@ InterfaceGuid = 71652D04-BF38-434A-BCB8-6547D7FD8384
 Name          = GenericTest\FloatingPointABITest
 Description   =
 
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = 6b4d5d18-f55f-4fc5-8496-f10022375c04
+InterfaceGuid = 71652D04-BF38-434A-BCB8-6547D7FD8384
+Name          = GenericTest\SbbrRequiredUefiProtocols
+Description   = Checks that UEFI protocols required by ARM SBBR are present.
+
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = d6e40d12-7a51-4454-b4fd-4c93887ed6cf
+InterfaceGuid = 71652D04-BF38-434A-BCB8-6547D7FD8384
+Name          = GenericTest\SbbrEfiSpecVerLvl
+Description   = Check the UEFI Specification Version Level to make sure it conforms to ARM SBBR.
+
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = 852e92eb-d7aa-4d61-84ef-d32dc5d545ec
+InterfaceGuid = 71652D04-BF38-434A-BCB8-6547D7FD8384
+Name          = GenericTest\SbbrSmbios
+Description   = Checks that SMBIOS on UEFI is implemented correctly.
+
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = D84A6430-99F5-4660-8454-6E4C896A7E51
+InterfaceGuid = 71652D04-BF38-434a-BCB8-6547D7FD8384
+Name          = GenericTest\SbbrSysEnvConfig
+Description   = SBBR UEFI System Environment and Configuration Tests
+
 [Category Data]
 Revision      = 0x00010000
 CategoryGuid  = E9EF7553-F833-4E56-96E8-38AE679523CC
@@ -130,6 +158,13 @@ InterfaceGuid = E9EF7553-F833-4E56-96E8-38AE679523CC
 Name          = BootServicesTest\MiscBootServicesTest
 Description   =
 
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = 8dafd7a7-44d0-4cf4-9d28-9f87080fc091
+InterfaceGuid = E9EF7553-F833-4E56-96E8-38AE679523CC
+Name          = BootServicesTest\SbbrBootServices
+Description   = Tests SBBR boot services requirements.
+
 [Category Data]
 Revision      = 0x00010000
 CategoryGuid  = AFF115FB-387B-4C18-8C41-6AFC7F03BB90
@@ -165,6 +200,13 @@ InterfaceGuid = AFF115FB-387B-4C18-8C41-6AFC7F03BB90
 Name          = RuntimeServicesTest\MiscRuntimeServicesTest
 Description   =
 
+[Category Data]
+Revision      = 0x00010000
+CategoryGuid  = 52A69BBF-E19F-4e82-93D6-AAC46E2E1E06
+InterfaceGuid = AFF115FB-387B-4c18-8C41-6AFC7F03BB90
+Name          = RuntimeServicesTest\SBBRRuntimeServicesTest
+Description   = SBBR Runtime Services Tests
+
 [Category Data]
 Revision      = 0x00010000
 CategoryGuid  = 5B1B31A1-9562-11D2-8E3F-00A0C969723B
diff --git a/uefi-sct/SctPkg/Library/SctGuidLib/SctGuidLib.inf b/uefi-sct/SctPkg/Library/SctGuidLib/SctGuidLib.inf
index 8f918b26..2bbd22c6 100644
--- a/uefi-sct/SctPkg/Library/SctGuidLib/SctGuidLib.inf
+++ b/uefi-sct/SctPkg/Library/SctGuidLib/SctGuidLib.inf
@@ -25,6 +25,7 @@
 [defines]
   BASE_NAME            = SctGuidLib
   COMPONENT_TYPE       = LIBRARY
+  MODULE_TYPE          = UEFI_APPLICATION
 
 [sources.common]
   SctGuidLib.c
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c
index 2bd79db8..57cdcf81 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestConformance.c
@@ -32,6 +32,7 @@ Abstract:
 
 #define STATUS_BUFFER_SIZE   8
 #define RECOVER_BUFFER_SIZE  1024
+#define MAX_BUFFER_SIZE  10
 
 EFI_GUID gTestVendor1Guid = TEST_VENDOR1_GUID;
 
@@ -790,6 +791,7 @@ BBTestExitBootServicesConsistencyTest (
   UINT8                                Data[STATUS_BUFFER_SIZE];
   UINT8                                Buffer[RECOVER_BUFFER_SIZE];
   EFI_STATUS                           ReturnStatus;
+  UINTN                                RecoveryData, RecoveryDataSize;
 
   //
   // Init
@@ -832,102 +834,13 @@ BBTestExitBootServicesConsistencyTest (
     return Status;
   }
 
-  ResetData = (RESET_DATA *)Buffer;
-
-  //
-  // Read reset record
-  //
-  Status = RecoveryLib->ReadResetRecord (
-                          RecoveryLib,
-                          &Size,
-                          Buffer
-                          );
-
-  //
-  // The workflow to check the recovery data
-  //
-  if (EFI_SUCCESS == Status) {
-    //
-    // To check the recovery data size
-    //
-    if (Size == sizeof(RESET_DATA)){
-      //
-      // To Check the recovery data
-      //
-      if (ResetData->Step == 1) {
-        //
-        // Step 1: find the valid recovery data, to retrive presaved status from variable
-        //
-        DataSize = STATUS_BUFFER_SIZE;
-        Status   = gtRT->GetVariable (
-                         L"ExitBootServicesTestVariable",    // VariableName
-                         &gTestVendor1Guid,                  // VendorGuid
-                         NULL,                               // Attributes
-                         &DataSize,                          // DataSize
-                         &ReturnStatus                       // Data
-                         );
+  RecoveryDataSize = sizeof(RecoveryData);
+  Status = RecoveryLib->ReadResetRecord(RecoveryLib, &RecoveryDataSize, &RecoveryData);
 
-        if (EFI_ERROR(Status)) {
-          StandardLib->RecordAssertion (
-                       StandardLib,
-                       EFI_TEST_ASSERTION_FAILED,
-                       gTestGenericFailureGuid,
-                       L"GetVariable - Can't get the test variable - ExitBootServicesTestVariable",
-                       L"%a:%d:Status - %r",
-                       __FILE__,
-                       (UINTN)__LINE__,
-                       Status
-                       );
-          return Status;
-        }
-        goto CheckResult;
-      } else {
-        //
-        // It is invalid recovery data
-        //
-        return EFI_LOAD_ERROR;
-      }
-    } else {
-      //
-      // The size of recovery data is invalid
-      //
-      return EFI_LOAD_ERROR;
-    }
+  if (!EFI_ERROR(Status) && RecoveryData == 1) {
+      goto CheckResult;
   }
 
-  //
-  // Step 0: No recovery data is found.
-  //
-
-  //
-  // Print out some information to avoid the user thought it is an error
-  //
-  SctPrint (L"System will cold reset after 2 second and test will be resumed after reboot.");
-  gtBS->Stall (2000000);
-
-
-  ResetData->Step = 1;
-  ResetData->TplIndex = 0;
-  Status = RecoveryLib->WriteResetRecord (
-                            RecoveryLib,
-                            sizeof (RESET_DATA),
-                            (UINT8*)ResetData
-                            );
-  if (EFI_ERROR(Status)) {
-    StandardLib->RecordAssertion (
-                   StandardLib,
-                   EFI_TEST_ASSERTION_FAILED,
-                   gTestGenericFailureGuid,
-                   L"TestRecoveryLib - WriteResetRecord",
-                   L"%a:%d:Status - %r",
-                   __FILE__,
-                   (UINTN)__LINE__,
-                   Status
-                   );
-    return Status;
-  }
-
-
   //
   // Checkpoint 1:
   // 3.5.2.1  ExitBootServices should not succeed with an invalid MapKey
@@ -954,15 +867,18 @@ BBTestExitBootServicesConsistencyTest (
 
   MapKey += MapKey;
 
+  RecoveryData = 1;
+  RecoveryLib->WriteResetRecord (RecoveryLib, sizeof(RecoveryData), &RecoveryData);
+
+  SctPrint (L"System will cold reset after 1 second. please run this test again...");
+
+  gtBS->Stall (1000000);
+
+
   ReturnStatus = gtBS->ExitBootServices (
                          mImageHandle,
                          MapKey
                          );
-  if (ReturnStatus == EFI_INVALID_PARAMETER) {
-    AssertionType = EFI_TEST_ASSERTION_PASSED;
-  } else {
-    AssertionType = EFI_TEST_ASSERTION_FAILED;
-  }
 
   Status = gtRT->SetVariable (
                      L"ExitBootServicesTestVariable",                                                           // VariableName
@@ -975,9 +891,35 @@ BBTestExitBootServicesConsistencyTest (
   //reset system
   gtRT->ResetSystem (EfiResetCold, EFI_SUCCESS, 0, NULL);
 
-
+  // get var to get the status
 CheckResult:
 
+  DataSize = MAX_BUFFER_SIZE;
+
+  Status = gtRT->GetVariable (
+                 L"ExitBootServicesTestVariable",             // VariableName
+                 &gTestVendor1Guid,                           // VendorGuid
+                 NULL,                                        // Attributes
+                 &DataSize,                                   // DataSize
+                 &ReturnStatus                                // Data
+                 );
+
+
+  if (EFI_ERROR(Status)) {
+    AssertionType = EFI_TEST_ASSERTION_FAILED;
+    StandardLib->RecordAssertion (
+                 StandardLib,
+                 AssertionType,
+                 gConsistencyTestAssertionGuid009,
+                 L"BS.ExitBootServices - ConsistencyTestCheckpoint1",
+                 L"%a:%d: GetVariable service routine failed - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+    goto Done;
+  }
+
   if (ReturnStatus == EFI_INVALID_PARAMETER) {
     AssertionType = EFI_TEST_ASSERTION_PASSED;
   } else {
@@ -995,14 +937,7 @@ CheckResult:
                  ReturnStatus,
                  EFI_INVALID_PARAMETER
                  );
-
-  Status = gtRT->SetVariable (
-                     L"ExitBootServicesTestVariable",                                                           // VariableName
-                     &gTestVendor1Guid,                                                                         // VendorGuid
-                     EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS, // Attributes
-                     0,                               // DataSize
-                     Data                             // Data
-                     );
+Done:
 
   Status = ImageTestCheckForCleanEnvironment (&Numbers);
   if (EFI_ERROR(Status)) {
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c
index 11f78cd4..ec9d6dae 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/ImageBBTestFunction.c
@@ -161,9 +161,9 @@ BBTestLoadImageInterfaceTest (
   //Checkpoint 8:
   //4.1.2.8  Call LoadImage to load image for HII protocol
   //
-  BBTestLoadImageInterfaceTestCheckPoint8(StandardLib);
+  //BBTestLoadImageInterfaceTestCheckPoint8(StandardLib);
 
-  BBTestLoadImageInterfaceTestCheckPoint9(StandardLib);
+  //BBTestLoadImageInterfaceTestCheckPoint9(StandardLib);
 #endif  
   return EFI_SUCCESS;
 }
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h
index 3e713f44..4bc0cd29 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/ImageServices/BlackBoxTest/Misc.h
@@ -29,6 +29,7 @@ Abstract:
 
 #include "ImageBBTest.h"
 #include "ProtocolDefinition.h"
+#include EFI_TEST_PROTOCOL_DEFINITION(TestRecoveryLibrary)
 
 typedef struct {
   VOID          *Registration;
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestConformance.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestConformance.c
index 1b81ecbc..2bab3420 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestConformance.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestConformance.c
@@ -288,7 +288,7 @@ BBTestGetMemoryMapConsistencyTest (
                  L"%a:%d:Status - %r",
                  __FILE__,
                  (UINTN)__LINE__,
-                 Status
+                 Status2
                  ); 
 
   FreeMemoryMap ();
@@ -1079,81 +1079,3 @@ BBTestAllocatePoolConsistencyTest (
   FreeMemoryMap ();
   return EFI_SUCCESS;
 }
-
-/**
- *  Entrypoint for gtBS->FreePool () Consistency Test.
- *  @param This a pointer of EFI_BB_TEST_PROTOCOL.
- *  @param ClientInterface a pointer to the interface to be tested.
- *  @param TestLevel test "thoroughness" control.
- *  @param SupportHandle a handle containing protocols required.
- *  @return EFI_SUCCESS Finish the test successfully.
- */
-//
-// TDS 3.5
-//
-EFI_STATUS
-BBTestFreePoolConsistencyTest (
-  IN EFI_BB_TEST_PROTOCOL       *This,
-  IN VOID                       *ClientInterface,
-  IN EFI_TEST_LEVEL             TestLevel,
-  IN EFI_HANDLE                 SupportHandle
-  )
-{
-  EFI_STANDARD_TEST_LIBRARY_PROTOCOL   *StandardLib;
-  EFI_STATUS                           Status;
-  //VOID                                 *Memory;
-  EFI_TEST_ASSERTION                   AssertionType;
-
-  //
-  // Get the Standard Library Interface
-  //
-  Status = gtBS->HandleProtocol (
-                   SupportHandle,
-                   &gEfiStandardTestLibraryGuid,
-                   (VOID **) &StandardLib
-                   );
-
-  if (EFI_ERROR(Status)) {
-    return Status;
-  }
-
-  Status = InitMemoryMap ();
-  if (EFI_ERROR(Status)) {
-    StandardLib->RecordAssertion (
-                   StandardLib,
-                   EFI_TEST_ASSERTION_FAILED,
-                   gTestGenericFailureGuid,
-                   L"InitMemoryMap - Allocate memory map buffer",
-                   L"%a:%d:Status - %r",
-                   __FILE__,
-                   (UINTN)__LINE__,
-                   Status
-                   );
-    return Status;
-  }
-
-  //
-  // 3.5.2.1  FreePool should not succeed when the Buffer is NULL
-  //
-  Status = gtBS->FreePool (
-                   NULL // invalid
-                   );
-  if (Status == EFI_INVALID_PARAMETER) {
-    AssertionType = EFI_TEST_ASSERTION_PASSED;
-  } else {
-    AssertionType = EFI_TEST_ASSERTION_FAILED;
-  }
-  StandardLib->RecordAssertion (
-                 StandardLib,
-                 AssertionType,
-                 gMemoryAllocationServicesConsistencyTestAssertionGuid042,
-                 L"BS.FreePool - Buffer is NULL",
-                 L"%a:%d:Status - %r",
-                 __FILE__,
-                 (UINTN)__LINE__,
-                 Status
-                 );
-
-  FreeMemoryMap ();
-  return EFI_SUCCESS;
-}
\ No newline at end of file
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestFunction.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestFunction.c
index 82c9baab..30db8c51 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestFunction.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestFunction.c
@@ -1832,117 +1832,3 @@ BBTestAllocatePoolInterfaceTest (
   FreeMemoryMap ();
   return EFI_SUCCESS;
 }
-
-/**
- *  Entrypoint for gtBS->FreePool () Interface Test.
- *  @param This a pointer of EFI_BB_TEST_PROTOCOL.
- *  @param ClientInterface a pointer to the interface to be tested.
- *  @param TestLevel test "thoroughness" control.
- *  @param SupportHandle a handle containing protocols required.
- *  @return EFI_SUCCESS Finish the test successfully.
- */
-//
-// TDS 4.5
-//
-EFI_STATUS
-BBTestFreePoolInterfaceTest (
-  IN EFI_BB_TEST_PROTOCOL       *This,
-  IN VOID                       *ClientInterface,
-  IN EFI_TEST_LEVEL             TestLevel,
-  IN EFI_HANDLE                 SupportHandle
-  )
-{
-  EFI_STANDARD_TEST_LIBRARY_PROTOCOL   *StandardLib;
-  EFI_STATUS                           Status;
-  VOID                                 *Memory;
-  EFI_TEST_ASSERTION                   AssertionType;
-  UINTN                                Index;
-  UINTN                                TypeIndex;
-  EFI_TPL                              OldTpl;
-
-  //
-  // Get the Standard Library Interface
-  //
-  Status = gtBS->HandleProtocol (
-                   SupportHandle,
-                   &gEfiStandardTestLibraryGuid,
-                   (VOID **) &StandardLib
-                   );
-
-  if (EFI_ERROR(Status)) {
-    return Status;
-  }
-
-  Status = InitMemoryMap ();
-  if (EFI_ERROR(Status)) {
-    StandardLib->RecordAssertion (
-                   StandardLib,
-                   EFI_TEST_ASSERTION_FAILED,
-                   gTestGenericFailureGuid,
-                   L"InitMemoryMap - Allocate memory map buffer",
-                   L"%a:%d:Status - %r",
-                   __FILE__,
-                   (UINTN)__LINE__,
-                   Status
-                   );
-    return Status;
-  }
-
-  for (Index = 0; Index < TPL_ARRAY_SIZE; Index++) {
-    //
-    // 4.5.2.1  FreePool must succeed with valid parameters.
-    //
-    for (TypeIndex = 0; TypeIndex < ALLOCATEPOOL_MEMORYTYPE_NUM; TypeIndex++) {
-      Status = gtBS->AllocatePool (
-                       AllocatePoolMemoryType[TypeIndex],
-                       1,
-                       (VOID **)&Memory
-                       );
-      if (EFI_ERROR(Status)) {
-        StandardLib->RecordAssertion (
-                       StandardLib,
-                       EFI_TEST_ASSERTION_FAILED,
-                       gTestGenericFailureGuid,
-                       L"BS.AllocatePool - 1 byte",
-                       L"%a:%d:Status - %r, TPL - %d, MemType - %d",
-                       __FILE__,
-                       (UINTN)__LINE__,
-                       Status,
-                       TplArray[Index],
-                       AllocatePoolMemoryType[TypeIndex]
-                       );
-        continue;
-      }
-      OldTpl = gtBS->RaiseTPL (TplArray[Index]);
-      Status = gtBS->FreePool (
-                       Memory
-                       );
-      gtBS->RestoreTPL (OldTpl);
-      if (!EFI_ERROR(Status)) {
-        AssertionType = EFI_TEST_ASSERTION_PASSED;
-      } else {
-        AssertionType = EFI_TEST_ASSERTION_FAILED;
-      }
-      StandardLib->RecordAssertion (
-                     StandardLib,
-                     AssertionType,
-                     Index==0? \
-                     gMemoryAllocationServicesInterfaceTestAssertionGuid038: \
-                     (Index == 1? \
-                      gMemoryAllocationServicesBBTestFunctionAssertionGuid075: \
-                      gMemoryAllocationServicesBBTestFunctionAssertionGuid076),
-                     L"BS.FreePool - 1 byte",
-                     L"%a:%d:Status - %r, TPL - %d, MemType - %d",
-                     __FILE__,
-                     (UINTN)__LINE__,
-                     Status,
-                     TplArray[Index],
-                     AllocatePoolMemoryType[TypeIndex]
-                     );
-    }
-
-  }
-
-  FreeMemoryMap ();
-  return EFI_SUCCESS;
-}
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestMain.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestMain.c
index 8aa89a93..1c902d82 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestMain.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/BootServices/MemoryAllocationServices/BlackBoxTest/MemoryAllocationServicesBBTestMain.c
@@ -85,15 +85,6 @@ EFI_BB_TEST_ENTRY_FIELD gBBTestEntryField[] = {
     EFI_TEST_CASE_AUTO,
     BBTestAllocatePoolConsistencyTest
   },
-  {
-    MEMORY_ALLOCATION_SERVICES_FREEPOOL_CONSISTENCY_GUID,
-    L"FreePool_Conf",
-    L"Consistency Test for FreePool",
-    EFI_TEST_LEVEL_MINIMAL,
-    gSupportProtocolGuid1,
-    EFI_TEST_CASE_AUTO,
-    BBTestFreePoolConsistencyTest
-  },
   {
     MEMORY_ALLOCATION_SERVICES_GETMEMORYMAP_INTERFACE_GUID,
     L"GetMemoryMap_Func",
@@ -130,16 +121,6 @@ EFI_BB_TEST_ENTRY_FIELD gBBTestEntryField[] = {
     EFI_TEST_CASE_AUTO,
     BBTestAllocatePoolInterfaceTest
   },
-  {
-    MEMORY_ALLOCATION_SERVICES_FREEPOOL_INTERFACE_GUID,
-    L"FreePool_Func",
-    L"Interface Test for FreePool",
-    EFI_TEST_LEVEL_DEFAULT,
-    gSupportProtocolGuid1,
-    EFI_TEST_CASE_AUTO,
-    BBTestFreePoolInterfaceTest
-  },
-
 #ifdef EFI_TEST_EXHAUSTIVE
   {
     MEMORY_ALLOCATION_SERVICES_GETMEMORYMAP_STRESS_TEST_GUID,
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini b/uefi-sct/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini
index 4deaae3b..c5b9460b 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/Generic/EfiCompliant/BlackBoxTest/Dependency/Config/EfiCompliant.ini
@@ -106,34 +106,34 @@ IGNORE_COMPLIANT_TEST_CSV = no
 [Platform Specific]
 ConsoleDevices            = yes
 HiiConfigSupport          = yes
-HiiFontSupport            = yes
-GraphicalConsoleDevices   = yes
-PointerDevices            = yes
-BootFromDiskDevices       = yes
-BootFromNetworkDevices    = yes
-ValidateBootImageThruNet  = yes
-UartDevices               = yes
-PciBusSupport             = yes
-UsbBusSupport             = yes
-NVMExpressPassThru        = yes
-BootFromNVMe              = yes
-ExtScsiPassThru           = yes
-DebugSupport              = yes
-PlatformDriverOverride    = yes
-AtaPassThru               = yes
-UEFIIPv4Support           = yes
-BootFromScsi              = yes
-ExtScsiPassThruSupport    = yes
-BootFromIScsi             = yes
-EBCSupport                = yes
-UEFIIPv6Support           = yes
-VLANSupport               = yes
-DNS4Support               = yes
-DNS6Support               = yes
-TLSSupport                = yes
-HTTPSupport               = yes
-EAPSupport                = yes
-BlueToothClassicSupport   = yes
-BlueToothLESupport        = yes
-IPSecSupport              = yes
+HiiFontSupport            = no
+GraphicalConsoleDevices   = no
+PointerDevices            = no
+BootFromDiskDevices       = no
+BootFromNetworkDevices    = no
+ValidateBootImageThruNet  = no
+UartDevices               = no
+PciBusSupport             = no
+UsbBusSupport             = no
+NVMExpressPassThru        = no
+BootFromNVMe              = no
+ExtScsiPassThru           = no
+DebugSupport              = no
+PlatformDriverOverride    = no
+AtaPassThru               = no
+UEFIIPv4Support           = no
+BootFromScsi              = no
+ExtScsiPassThruSupport    = no
+BootFromIScsi             = no
+EBCSupport                = no
+UEFIIPv6Support           = no
+VLANSupport               = no
+DNS4Support               = no
+DNS6Support               = no
+TLSSupport                = no
+HTTPSupport               = no
+EAPSupport                = no
+BlueToothClassicSupport   = no
+BlueToothLESupport        = no
+IPSecSupport              = no
 
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/VariableServices/BlackBoxTest/AuthVariableServicesBBTestConformance.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/VariableServices/BlackBoxTest/AuthVariableServicesBBTestConformance.c
index ac3d2c0b..23b00e35 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/VariableServices/BlackBoxTest/AuthVariableServicesBBTestConformance.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/VariableServices/BlackBoxTest/AuthVariableServicesBBTestConformance.c
@@ -287,7 +287,7 @@ AuthVariableDERConfTest (
                    &MaximumVariableSize
                    );
 
-    if (Status == EFI_SUCCESS || Status == EFI_UNSUPPORTED) {
+    if (Status == EFI_UNSUPPORTED) {
       Result = EFI_TEST_ASSERTION_PASSED;
     } else {
       Result = EFI_TEST_ASSERTION_FAILED;
diff --git a/uefi-sct/SctPkg/TestInfrastructure/SCT/Drivers/StandardTest/StandardTest.c b/uefi-sct/SctPkg/TestInfrastructure/SCT/Drivers/StandardTest/StandardTest.c
index 94cae289..cf9d64f8 100644
--- a/uefi-sct/SctPkg/TestInfrastructure/SCT/Drivers/StandardTest/StandardTest.c
+++ b/uefi-sct/SctPkg/TestInfrastructure/SCT/Drivers/StandardTest/StandardTest.c
@@ -1088,7 +1088,10 @@ Returns:
 
   } else {
     StslWriteLogFile (Private, DashLine);
-    
+
+    SctSPrint (Buffer, EFI_MAX_PRINT_BUFFER, L"Arm ACS Version: %s\n", L""ACS_VERSION);
+    StslWriteLogFile (Private, Buffer);
+
     SctSPrint (Buffer, EFI_MAX_PRINT_BUFFER, L"%s\n", Private->EntryName);
     StslWriteLogFile (Private, Buffer);
     SctSPrint (Buffer, EFI_MAX_PRINT_BUFFER, L"Revision 0x%08x\n", Private->TestRevision);
